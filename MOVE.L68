00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 5/14/2015 11:26:43 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000  11C0 7EEF                 11               move.b D0, $7EEF                *STUFF                  
00001004  23FC 11C07EEF 00008000    12               move.L #$11C07EEF, $8000        *FOR
0000100E                            13               *move.W #$AFFE, $8004           *DOING
0000100E  2C7C 00008000             14               MOVEA.L    #$8000, A6           *SOME
00001014  3E39 00008000             15               MOVE.W $8000, D7                *TESTING
0000101A  4EB9 000010B4             16               JSR    isMOVEBW
00001020                            17               
00001020                            18               * END PROGRAM
00001020  103C 0009                 19  end          MOVE.B #9, D0
00001024  4E4F                      20               TRAP #15
00001026                            21  
00001026                            22  *---------------------------------------------------------------------------------------------------------
00001026                            23  *isMOVEAW          (IS MOVEA.W)- TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 AND INSIDE 
00001026                            24  *                  D7 IS A KNOWN MOVE.B OR MOVEA.W COMMAND.
00001026                            25  *
00001026                            26  *PRE CONDITIONS -  A6 POINTS TO CURRENT INSTRUCTION, D7 CONTAINS CURRENT INSTRUCTION
00001026                            27  *
00001026                            28  *POST CONDITIONS - D6, D5, D4, D3 CONTAIN SOURCE REGISTER, DESTINATION REGISTER, SOURCE MODE, DESTINATION
00001026                            29  *                  REGISTER RESPECTIVELY. iF ERRORS, D2 CONTAINS $BEEF (YUM). A6 POINTS TO NEXT INSTRUCTION 
00001026                            30  *                  TO DISASSEMBLE, IF A5 CONTAINS A NON-ZERO ADDRESS, ABSOLUTE AND OR IMMEDIATE 
00001026                            31  *                  ADRESSING WAS USED AND DATA POINTED TO BY A5 NEEDS TO BE PRINTED.
00001026                            32  *---------------------------------------------------------------------------------------------------------
00001026  544E                      33  isMOVEAW    ADDQ.W  #2, A6          *KEEP A6 CURRENT
00001028  4EB9 000011E4             34              JSR     getSREG         *PARSE REGISTERS AND MODES
0000102E  4EB9 000011FA             35              JSR     getDREG
00001034  4EB9 0000120E             36              JSR     getSMODE
0000103A  4EB9 00001224             37              JSR     getDMODE
00001040  4EB9 00001166             38              JSR     sModeErr        *CHECK FOR ERRORS IN REGISTERS D3 and D4 (source and destination modes)
00001046  4EB9 00001058             39              JSR     dModeErrAW
0000104C  B4BC 0000BEEF             40              CMP.L   #$BEEF, D2      *CHECK FOR ERROR FLAG BEEF (MMM) AND RETURN IF SET
00001052  6600 0010                 41              BNE     chkAddMAW       *CHECK ADDRESSING MODES FOR WORDB SPECS
00001056  4E75                      42              RTS
00001058                            43              
00001058                            44  *CHECK FOR ERRORS CONTAINED IN DESTINATION MODE (DESTINATION MODE ERROR MOVEA.W)       
00001058  B6BC 00000001             45  dModeErrAW  CMP.L   #1, D3          *DESTINATION MODE MUST BE 1
0000105E  6600 017C                 46              BNE     setEAErr        *SET EFFECTIVE ADDRESS ERROR
00001062  4E75                      47              RTS
00001064                            48              
00001064                            49  *CHECKS ADDRESSING MODES FOR IMMEDIATE DATA OR ABSOLUTE ADDRESSING SO THEY CAN BE APPENDED BY IO  
00001064  2A7C 00000000             50  chkAddMAW   MOVEA.l  #0, A5
0000106A  287C 00000000             51              MOVEA.l  #0, A4
00001070  B8BC 00000007             52              CMP.L    #7, D4          
00001076  6700 0004                 53              BEQ      chkSAddAW  
0000107A  4E75                      54  rtn_cAMAW   RTS 
0000107C                            55  
0000107C  BCBC 00000000             56  chkSAddAW   CMP.L   #0, D6
00001082  6700 0018                 57              BEQ     wordModeSAW 
00001086  BCBC 00000001             58              CMP.L   #1, D6
0000108C  6700 0016                 59              BEQ     longModeSAW
00001090  BCBC 00000004             60              CMP.L   #4, D6
00001096  6700 0014                 61              BEQ     immediateModeSAW
0000109A  4E75                      62              RTS
0000109C                            63              
0000109C                            64  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
0000109C  2A4E                      65  wordModeSAW MOVEA.L A6, A5          *STORE WORD IN A5 SO IO CAN PRINT IT
0000109E  544E                      66              ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
000010A0  4EF8 107A                 67              JMP rtn_cAMAW
000010A4                            68              
000010A4                            69  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
000010A4  2A4E                      70  longModeSAW MOVEA.L A6, A5          *STORE LING IN A5 SO IO CAN PRINT IT
000010A6  584E                      71              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
000010A8  4EF8 107A                 72              JMP rtn_cAMAW
000010AC                            73              
000010AC                            74  *if immediate mode found get pointer to data in a5 so IO can print       
000010AC  2A4E                      75  immediateModeSAW MOVEA.L  A6, A5
000010AE  544E                      76                   ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
000010B0  4EF8 107A                 77                   JMP rtn_cAMAW
000010B4                            78            
000010B4                            79  *---------------------------------------------------------------------------------------------------------
000010B4                            80  *isMOVEBW          (IS MOVE.B OR MOVE.W)- TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 AND INSIDE 
000010B4                            81  *                  D7 IS A KNOWN MOVE.B OR MOVE.W COMMAND. EA IS IDENTICLE FOR MOVE.B AND MOVE.W.
000010B4                            82  *
000010B4                            83  *PRE CONDITIONS -  A6 POINTS TO CURRENT INSTRUCTION, D7 CONTAINS CURRENT INSTRUCTION
000010B4                            84  *
000010B4                            85  *POST CONDITIONS - D6, D5, D4, D3 CONTAIN SOURCE REGISTER, DESTINATION REGISTER, SOURCE MODE, DESTINATION
000010B4                            86  *                  REGISTER RESPECTIVELY. iF ERRORS, D2 CONTAINS $BEEF (YUM). A6 POINTS TO NEXT INSTRUCTION 
000010B4                            87  *                  TO DISASSEMBLE, IF A5 OR A4 CONTAIN NON-ZERO ADDRESSES, ABSOLUTE AND OR IMMEDIATE 
000010B4                            88  *                  ADRESSING WAS USED AND DATA POINTED TO BY A5 AND OR A4 NEED TO BE PRINTED IN THAT ORDER.
000010B4                            89  *---------------------------------------------------------------------------------------------------------
000010B4  544E                      90  isMOVEBW    ADDQ.W  #2, A6          *KEEP A6 CURRENT
000010B6  4EB9 000011E4             91              JSR     getSREG         *PARSE REGISTERS AND MODES
000010BC  4EB9 000011FA             92              JSR     getDREG
000010C2  4EB9 0000120E             93              JSR     getSMODE
000010C8  4EB9 00001224             94              JSR     getDMODE
000010CE  4EB9 00001166             95              JSR     sModeErr        *CHECK FOR ERRORS IN REGISTERS D3 and D4 (source and destination modes)
000010D4  4EB9 00001186             96              JSR     dModeErr
000010DA  B4BC 0000BEEF             97              CMP.L   #$BEEF, D2      *CHECK FOR ERROR FLAG BEEF (MMM) AND RETURN IF SET
000010E0  6600 0004                 98              BNE     chkAddM         *CHECK ADDRESSING MODES FOR WORDB SPECS
000010E4  4E75                      99              RTS
000010E6                           100              
000010E6                           101  *CHECKS ADDRESSING MODES FOR IMMEDIATE DATA OR ABSOLUTE ADDRESSING SO THEY CAN BE APPENDED BY IO  
000010E6  2A7C 00000000            102  chkAddM     MOVEA.l  #0, A5
000010EC  287C 00000000            103              MOVEA.l  #0, A4
000010F2  B8BC 00000007            104              CMP.L    #7, D4          
000010F8  6700 000E                105              BEQ      chkSAdd  
000010FC  B6BC 00000007            106  rtn_cAM     CMP.L    #7, D3          
00001102  6700 0024                107              BEQ      chkDAdd  
00001106  4E75                     108  rtn_cAM2    RTS  
00001108                           109  
00001108  BCBC 00000000            110  chkSAdd     CMP.L   #0, D6
0000110E  6700 002E                111              BEQ     wordModeS 
00001112  BCBC 00000001            112              CMP.L   #1, D6
00001118  6700 002C                113              BEQ     longModeS
0000111C  BCBC 00000004            114              CMP.L   #4, D6
00001122  6700 002A                115              BEQ     immediateModeS
00001126  4E75                     116              RTS
00001128                           117              
00001128  BABC 00000000            118  chkDAdd     CMP.L   #0, D5
0000112E  6700 0026                119              BEQ     wordModeD 
00001132  BABC 00000001            120              CMP.L   #1, D5
00001138  6700 0024                121              BEQ     longModeD
0000113C  4E75                     122              RTS
0000113E                           123     
0000113E                           124  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
0000113E  2A4E                     125  wordModeS   MOVEA.L A6, A5          *STORE WORD IN A5 SO IO CAN PRINT IT
00001140  544E                     126              ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
00001142  4EF8 10FC                127              JMP rtn_cAM
00001146                           128              
00001146                           129  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
00001146  2A4E                     130  longModeS   MOVEA.L A6, A5          *STORE LING IN A5 SO IO CAN PRINT IT
00001148  584E                     131              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
0000114A  4EF8 10FC                132              JMP rtn_cAM
0000114E                           133              
0000114E                           134  *if immediate mode found get pointer to data in a5 so IO can print       
0000114E  2A4E                     135  immediateModeS MOVEA.L  A6, A5
00001150  544E                     136                 ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
00001152  4EF8 10FC                137                 JMP rtn_cAM
00001156                           138                 
00001156                           139  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
00001156  284E                     140  wordModeD   MOVEA.L A6, A4          *STORE WORD IN A4 SO IO CAN PRINT IT
00001158  544E                     141              ADDQ.W  #2, A6          *
0000115A  4EF8 1106                142              JMP rtn_cAM2
0000115E                           143              
0000115E                           144  *IDENTICAL TO WORDMODED CLEAN UP LATER!       
0000115E  284E                     145  longModeD   MOVEA.L A6, A4          *STORE LING IN A4 SO IO CAN PRINT IT
00001160  584E                     146              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
00001162  4EF8 1106                147              JMP rtn_cAM2
00001166                           148           
00001166                           149  *CHECK FOR ERRORS CONTAINED IN SOURCE MODE      
00001166  B8BC 00000005            150  sModeErr    CMP.L   #5, D4          *MODE CANNOT BE 5
0000116C  6700 006E                151              BEQ     setEAErr
00001170  B8BC 00000006            152              CMP.L   #6, D4          *MODE CANNOT BE 6
00001176  6700 0064                153              BEQ     setEAErr
0000117A  B8BC 00000007            154              CMP.L   #7, D4          *IF MODE IS 7 CHECK REGISTERS FOR ERRORS
00001180  6700 003A                155              BEQ     sIErr
00001184  4E75                     156              RTS
00001186                           157      
00001186                           158  *CHECK FOR ERRORS CONTAINED IN DESTINATION MODE        
00001186  B6BC 00000001            159  dModeErr    CMP.L   #1, D3          *DESTINATION MODE CANNOT BE 1
0000118C  6700 004E                160              BEQ     setEAErr
00001190  B6BC 00000007            161              CMP.L   #7, D3          *IF MODE IS 7 CHECK REGISTERS FOR ERRORS
00001196  6700 0018                162              BEQ     dIErr
0000119A  B6BC 00000005            163              CMP.L   #5, D3          *MODE CANNOT BE 5
000011A0  6700 003A                164              BEQ     setEAErr
000011A4  B6BC 00000006            165              CMP.L   #6, D3          *MODE CANNOT BE 6
000011AA  6700 0030                166              BEQ     setEAErr
000011AE  4E75                     167              RTS
000011B0                           168   
000011B0                           169  *CHECK FOR ERRORS IN DESTINATION ADDRESSING MODES ABSOLUTE AND IMMEDIATE           
000011B0  BABC 00000001            170  dIErr       CMP.L   #1, D5          *DESTINATION REGISTER CANNOT BE GREATER THAN 1 WITH MODE 7
000011B6  6E00 0024                171              BGT     setEAErr
000011BA  4E75                     172              RTS
000011BC                           173      
000011BC                           174  *CHECK FOR ERRORS IN SOURCE ADDRESSING MODES ABSOLUTE AND IMMEDIATE        
000011BC  BCBC 00000002            175  sIErr       CMP.L   #2, D6          *REGISTER 2 CANNOT BE USED WITH MODE 7
000011C2  6700 0018                176              BEQ     setEAErr
000011C6  BCBC 00000003            177              CMP.L   #3, D6          *REGISTER 3 CANNOT BE USED WITH MODE 7
000011CC  6700 000E                178              BEQ     setEAErr
000011D0  BCBC 00000004            179              CMP.L   #4, D6          *ALL REGISTERS GREATER THAN 4 CANNOT BE USED WITH MODE 7
000011D6  6E00 0004                180              BGT     setEAErr
000011DA  4E75                     181              RTS
000011DC                           182              
000011DC                           183  *D2 WILL BE SET TO BEEF (MMM)FLAG IF ERRORS ARE FOUND IN EA
000011DC  4242                     184  setEAErr    CLR     D2
000011DE  343C BEEF                185              MOVE.W  #$BEEF, D2
000011E2  4E75                     186              RTS
000011E4                           187  
000011E4                           188  *SETS THE SOURCE REGISTER FOR A MOVE COMMAND TO D6          
000011E4  4246                     189  getSREG     CLR     D6
000011E6  2C07                     190              MOVE.L  D7, D6
000011E8  E18E                     191              LSL.L   #8, D6
000011EA  E18E                     192              LSL.L   #8, D6
000011EC  E18E                     193              LSL.L   #8, D6
000011EE  EB8E                     194              LSL.L   #5, D6
000011F0  E08E                     195              LSR.L   #8, D6
000011F2  E08E                     196              LSR.L   #8, D6
000011F4  E08E                     197              LSR.L   #8, D6
000011F6  EA8E                     198              LSR.L   #5, D6
000011F8  4E75                     199              RTS
000011FA                           200  
000011FA                           201  *SETS DESTINATION REGISTER FOR MOVE COMMAND TO D5            
000011FA  4245                     202  getDREG     CLR     D5
000011FC  2A07                     203              MOVE.L  D7, D5
000011FE  E18D                     204              LSL.L   #8, D5
00001200  E18D                     205              LSL.L   #8, D5
00001202  E98D                     206              LSL.L   #4, D5
00001204  E08D                     207              LSR.L   #8, D5
00001206  E08D                     208              LSR.L   #8, D5
00001208  E08D                     209              LSR.L   #8, D5
0000120A  EA8D                     210              LSR.L   #5, D5
0000120C  4E75                     211              RTS
0000120E                           212  
0000120E                           213  *SETS SOURCE MODE FOR MOVE COMMAND TO D4            
0000120E  4244                     214  getSMODE    CLR     D4
00001210  2807                     215              MOVE.L  D7, D4
00001212  E18C                     216              LSL.L   #8, D4
00001214  E18C                     217              LSL.L   #8, D4
00001216  E18C                     218              LSL.L   #8, D4
00001218  E58C                     219              LSL.L   #2, D4
0000121A  E08C                     220              LSR.L   #8, D4
0000121C  E08C                     221              LSR.L   #8, D4
0000121E  E08C                     222              LSR.L   #8, D4
00001220  EA8C                     223              LSR.L   #5, D4
00001222  4E75                     224              RTS    
00001224                           225  
00001224                           226  *GETS DESTNATION MODE FROM MOVE COMMAND, PUTS IN D3
00001224  4243                     227  getDMODE    CLR     D3
00001226  2607                     228              MOVE.L  D7, D3
00001228  E18B                     229              LSL.L   #8, D3
0000122A  E18B                     230              LSL.L   #8, D3
0000122C  EF8B                     231              LSL.L   #7, D3
0000122E  E08B                     232              LSR.L   #8, D3
00001230  E08B                     233              LSR.L   #8, D3
00001232  E08B                     234              LSR.L   #8, D3
00001234  EA8B                     235              LSR.L   #5, D3
00001236  4E75                     236              RTS    
00001238                           237  
00001238                           238             
00001238                           239  *---------------------------------------------------------------------------------------------------------
00001238                           240  *isMOVEL           (IS MOVE.L)- TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 AND INSIDE 
00001238                           241  *                  D7 IS A KNOWN MOVE.L COMMAND.
00001238                           242  *
00001238                           243  *PRE CONDITIONS -  A6 POINTS TO CURRENT INSTRUCTION, D7 CONTAINS CURRENT INSTRUCTION
00001238                           244  *
00001238                           245  *POST CONDITIONS - D6, D5, D4, D3 CONTAIN SOURCE REGISTER, DESTINATION REGISTER, SOURCE MODE, DESTINATION
00001238                           246  *                  REGISTER RESPECTIVELY. iF ERRORS, D2 CONTAINS $BEEF (YUM). A6 POINTS TO NEXT INSTRUCTION 
00001238                           247  *                  TO DISASSEMBLE, IF A5 OR A4 CONTAIN NON-ZERO ADDRESSES, ABSOLUTE AND OR IMMEDIATE 
00001238                           248  *                  ADRESSING WAS USED AND DATA POINTED TO BY A5 AND OR A4 NEED TO BE PRINTED IN THAT ORDER.
00001238                           249  *--------------------------------------------------------------------------------------------------------- 
00001238  544E                     250  isMOVEL     ADDQ.W  #2, A6          *KEEP A6 CURRENT
0000123A  4EB8 11E4                251              JSR     getSREG
0000123E  4EB8 11FA                252              JSR     getDREG
00001242  4EB8 120E                253              JSR     getSMODE
00001246  4EB8 1224                254              JSR     getDMODE
0000124A  4EB8 1166                255              JSR     sModeErr        *CHECK FOR ERRORS IN REGISTERS D3 and D4 (source and destination modes)
0000124E  4EB8 1186                256              JSR     dModeErr
00001252  B4BC 0000BEEF            257              CMP.L   #$BEEF, D2      *CHECK FOR ERROR FLAG BEEF (MMM) AND RETURN IF SET
00001258  6600 0004                258              BNE     chkAddML        *CHECK ADDRESSING MODE FOR MOVEW SPECS
0000125C  4E75                     259              RTS
0000125E                           260              
0000125E  2A7C 00000000            261  chkAddML    MOVEA.l  #0, A5         *CLEAR ADDRESS REGISTERS 5 AND 4
00001264  287C 00000000            262              MOVEA.l  #0, A4 
0000126A  B8BC 00000007            263              CMP.L    #7, D4         *IS SOURCE MODE 111?
00001270  6700 000E                264              BEQ      chkSAddL       *THEN CHECK FOR WORD, LONG, OR IMMEDIATE ADDRESSING
00001274  B6BC 00000007            265  rtn_cAML    CMP.L    #7, D3         *IS DESTINATION REGISTER 111? 
0000127A  6700 0024                266              BEQ      chkDAddL       *THEN CHECK FOR WORD OR LONG ADDRESSING
0000127E  4E75                     267  rtn_cAM2L   RTS 
00001280                           268  
00001280  BCBC 00000000            269  chkSAddL    CMP.L   #0, D6
00001286  6700 002E                270              BEQ     wordModeSL 
0000128A  BCBC 00000001            271              CMP.L   #1, D6
00001290  6700 002C                272              BEQ     longModeSL
00001294  BCBC 00000004            273              CMP.L   #4, D6
0000129A  6700 002A                274              BEQ     immediateModeSL
0000129E  4E75                     275              RTS
000012A0                           276              
000012A0  BABC 00000000            277  chkDAddL    CMP.L   #0, D5
000012A6  6700 0026                278              BEQ     wordModeDL 
000012AA  BABC 00000001            279              CMP.L   #1, D5
000012B0  6700 0024                280              BEQ     longModeDL
000012B4  4E75                     281              RTS
000012B6                           282              
000012B6  2A4E                     283  wordModeSL  MOVEA.L A6, A5          *STORE WORD IN A5 SO IO CAN PRINT IT
000012B8  544E                     284              ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
000012BA  4EF8 1274                285              JMP rtn_cAML
000012BE                           286              
000012BE  2A4E                     287  longModeSL  MOVEA.L A6, A5          *STORE LING IN A5 SO IO CAN PRINT IT
000012C0  584E                     288              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
000012C2  4EF8 1274                289              JMP rtn_cAML
000012C6                           290              
000012C6                           291  *if immediate mode found get pointer to data in a5 so IO can print       
000012C6  2A4E                     292  immediateModeSL MOVEA.L  A6, A5
000012C8  584E                     293                  ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
000012CA  4EF8 1274                294                  JMP rtn_cAML
000012CE                           295              
000012CE                           296  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
000012CE  284E                     297  wordModeDL  MOVEA.L A6, A4          *STORE WORD IN A4 SO IO CAN PRINT IT
000012D0  544E                     298              ADDQ.W  #2, A6          *
000012D2  4EF8 127E                299              JMP rtn_cAM2L
000012D6                           300              
000012D6                           301  *IDENTICAL TO WORDMODED CLEAN UP LATER!       
000012D6  284E                     302  longModeDL  MOVEA.L A6, A4          *STORE LING IN A4 SO IO CAN PRINT IT
000012D8  584E                     303              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
000012DA  4EF8 127E                304              JMP rtn_cAM2L 
000012DE                           305   
000012DE                           306  
000012DE                           307               
000012DE                           308  
000012DE                           309      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHKADDM             10E6
CHKADDMAW           1064
CHKADDML            125E
CHKDADD             1128
CHKDADDL            12A0
CHKSADD             1108
CHKSADDAW           107C
CHKSADDL            1280
DIERR               11B0
DMODEERR            1186
DMODEERRAW          1058
END                 1020
GETDMODE            1224
GETDREG             11FA
GETSMODE            120E
GETSREG             11E4
IMMEDIATEMODES      114E
IMMEDIATEMODESAW    10AC
IMMEDIATEMODESL     12C6
ISMOVEAW            1026
ISMOVEBW            10B4
ISMOVEL             1238
LONGMODED           115E
LONGMODEDL          12D6
LONGMODES           1146
LONGMODESAW         10A4
LONGMODESL          12BE
RTN_CAM             10FC
RTN_CAM2            1106
RTN_CAM2L           127E
RTN_CAMAW           107A
RTN_CAML            1274
SETEAERR            11DC
SIERR               11BC
SMODEERR            1166
START               1000
WORDMODED           1156
WORDMODEDL          12CE
WORDMODES           113E
WORDMODESAW         109C
WORDMODESL          12B6
