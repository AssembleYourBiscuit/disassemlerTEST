00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 5/15/2015 10:25:16 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000  11C0 7EEF                 11               move.b D0, $7EEF                *STUFF                  
00001004  23FC 11C07EEF 00008000    12               move.L #$11C07EEF, $8000        *FOR
0000100E                            13               *move.W #$AFFE, $8004           *DOING
0000100E  2C7C 00008000             14               MOVEA.L    #$8000, A6           *SOME
00001014  3E39 00008000             15               MOVE.W $8000, D7                *TESTING
0000101A  4EB9 000010B8             16               JSR    isMOVEBW
00001020                            17               
00001020                            18               * END PROGRAM
00001020  103C 0009                 19  end          MOVE.B #9, D0
00001024  4E4F                      20               TRAP #15
00001026                            21  
00001026                            22  *---------------------------------------------------------------------------------------------------------
00001026                            23  *isMOVEAW          (IS MOVEA.W)- TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 AND INSIDE 
00001026                            24  *                  D7 IS A KNOWN MOVE.B OR MOVEA.W COMMAND.
00001026                            25  *
00001026                            26  *PRE CONDITIONS -  A6 POINTS TO CURRENT INSTRUCTION, D7 CONTAINS CURRENT INSTRUCTION
00001026                            27  *
00001026                            28  *POST CONDITIONS - D6, D5, D4, D3 CONTAIN SOURCE REGISTER, DESTINATION REGISTER, SOURCE MODE, DESTINATION
00001026                            29  *                  REGISTER RESPECTIVELY. iF ERRORS, D2 CONTAINS $BEEF (YUM). A6 POINTS TO NEXT INSTRUCTION 
00001026                            30  *                  TO DISASSEMBLE, IF A5 CONTAINS A NON-ZERO ADDRESS, ABSOLUTE AND OR IMMEDIATE 
00001026                            31  *                  ADRESSING WAS USED AND DATA POINTED TO BY A5 NEEDS TO BE PRINTED.
00001026                            32  *---------------------------------------------------------------------------------------------------------
00001026  504A                      33  isMOVEAW    ADDQ    #8 ,A2         *INC A2 SO EA CAN BE APPENDED
00001028  5C4A                      34              ADDQ    #6 ,A2         *INC A2 SO EA CAN BE APPENDED
0000102A  544E                      35              ADDQ.W  #2, A6          *KEEP A6 CURRENT
0000102C  4EB9 000011EC             36              JSR     getSREG         *PARSE REGISTERS AND MODES
00001032  4EB9 00001202             37              JSR     getDREG
00001038  4EB9 00001216             38              JSR     getSMODE
0000103E  4EB9 0000122C             39              JSR     getDMODE
00001044  4EB9 0000116E             40              JSR     sModeErr        *CHECK FOR ERRORS IN REGISTERS D3 and D4 (source and destination modes)
0000104A  4EB9 0000105C             41              JSR     dModeErrAW
00001050  B4BC 0000BEEF             42              CMP.L   #$BEEF, D2      *CHECK FOR ERROR FLAG BEEF (MMM) AND RETURN IF SET
00001056  6600 0010                 43              BNE     chkAddMAW       *CHECK ADDRESSING MODES FOR WORDB SPECS
0000105A  4E75                      44              RTS
0000105C                            45              
0000105C                            46  *CHECK FOR ERRORS CONTAINED IN DESTINATION MODE (DESTINATION MODE ERROR MOVEA.W)       
0000105C  B6BC 00000001             47  dModeErrAW  CMP.L   #1, D3          *DESTINATION MODE MUST BE 1
00001062  6600 0180                 48              BNE     setEAErr        *SET EFFECTIVE ADDRESS ERROR
00001066  4E75                      49              RTS
00001068                            50              
00001068                            51  *CHECKS ADDRESSING MODES FOR IMMEDIATE DATA OR ABSOLUTE ADDRESSING SO THEY CAN BE APPENDED BY IO  
00001068  2A7C 00000000             52  chkAddMAW   MOVEA.l  #0, A5
0000106E  287C 00000000             53              MOVEA.l  #0, A4
00001074  B8BC 00000007             54              CMP.L    #7, D4          
0000107A  6700 0004                 55              BEQ      chkSAddAW  
0000107E  4E75                      56  rtn_cAMAW   RTS 
00001080                            57  
00001080  BCBC 00000000             58  chkSAddAW   CMP.L   #0, D6
00001086  6700 0018                 59              BEQ     wordModeSAW 
0000108A  BCBC 00000001             60              CMP.L   #1, D6
00001090  6700 0016                 61              BEQ     longModeSAW
00001094  BCBC 00000004             62              CMP.L   #4, D6
0000109A  6700 0014                 63              BEQ     immediateModeSAW
0000109E  4E75                      64              RTS
000010A0                            65              
000010A0                            66  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
000010A0  2A4E                      67  wordModeSAW MOVEA.L A6, A5          *STORE WORD IN A5 SO IO CAN PRINT IT
000010A2  544E                      68              ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
000010A4  4EF8 107E                 69              JMP rtn_cAMAW
000010A8                            70              
000010A8                            71  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
000010A8  2A4E                      72  longModeSAW MOVEA.L A6, A5          *STORE LING IN A5 SO IO CAN PRINT IT
000010AA  584E                      73              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
000010AC  4EF8 107E                 74              JMP rtn_cAMAW
000010B0                            75              
000010B0                            76  *if immediate mode found get pointer to data in a5 so IO can print       
000010B0  2A4E                      77  immediateModeSAW MOVEA.L  A6, A5
000010B2  544E                      78                   ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
000010B4  4EF8 107E                 79                   JMP rtn_cAMAW
000010B8                            80            
000010B8                            81  *---------------------------------------------------------------------------------------------------------
000010B8                            82  *isMOVEBW          (IS MOVE.B OR MOVE.W)- TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 AND INSIDE 
000010B8                            83  *                  D7 IS A KNOWN MOVE.B OR MOVE.W COMMAND. EA IS IDENTICLE FOR MOVE.B AND MOVE.W.
000010B8                            84  *
000010B8                            85  *PRE CONDITIONS -  A6 POINTS TO CURRENT INSTRUCTION, D7 CONTAINS CURRENT INSTRUCTION
000010B8                            86  *
000010B8                            87  *POST CONDITIONS - D6, D5, D4, D3 CONTAIN SOURCE REGISTER, DESTINATION REGISTER, SOURCE MODE, DESTINATION
000010B8                            88  *                  REGISTER RESPECTIVELY. iF ERRORS, D2 CONTAINS $BEEF (YUM). A6 POINTS TO NEXT INSTRUCTION 
000010B8                            89  *                  TO DISASSEMBLE, IF A5 OR A4 CONTAIN NON-ZERO ADDRESSES, ABSOLUTE AND OR IMMEDIATE 
000010B8                            90  *                  ADRESSING WAS USED AND DATA POINTED TO BY A5 AND OR A4 NEED TO BE PRINTED IN THAT ORDER.
000010B8                            91  *---------------------------------------------------------------------------------------------------------
000010B8  504A                      92  isMOVEBW    ADDQ    #8, A2         *INC A2 BY 12 DIGITS FOR STRING MOVE.B/W EACH CHAR IS 2 DIGITS IN HEX
000010BA  5C4A                      93              ADDQ    #6, A2         *INC A2 BY 12 DIGITS FOR STRING MOVE.B/W EACH CHAR IS 2 DIGITS IN HEX
000010BC  544E                      94              ADDQ.W  #2, A6          *KEEP A6 CURRENT
000010BE  4EB9 000011EC             95              JSR     getSREG         *PARSE REGISTERS AND MODES
000010C4  4EB9 00001202             96              JSR     getDREG
000010CA  4EB9 00001216             97              JSR     getSMODE
000010D0  4EB9 0000122C             98              JSR     getDMODE
000010D6  4EB9 0000116E             99              JSR     sModeErr        *CHECK FOR ERRORS IN REGISTERS D3 and D4 (source and destination modes)
000010DC  4EB9 0000118E            100              JSR     dModeErr
000010E2  B4BC 0000BEEF            101              CMP.L   #$BEEF, D2      *CHECK FOR ERROR FLAG BEEF (MMM) AND RETURN IF SET
000010E8  6600 0004                102              BNE     chkAddM         *CHECK ADDRESSING MODES FOR WORDB SPECS
000010EC  4E75                     103              RTS
000010EE                           104              
000010EE                           105  *CHECKS ADDRESSING MODES FOR IMMEDIATE DATA OR ABSOLUTE ADDRESSING SO THEY CAN BE APPENDED BY IO  
000010EE  2A7C 00000000            106  chkAddM     MOVEA.l  #0, A5
000010F4  287C 00000000            107              MOVEA.l  #0, A4
000010FA  B8BC 00000007            108              CMP.L    #7, D4          
00001100  6700 000E                109              BEQ      chkSAdd  
00001104  B6BC 00000007            110  rtn_cAM     CMP.L    #7, D3          
0000110A  6700 0024                111              BEQ      chkDAdd  
0000110E  4E75                     112  rtn_cAM2    RTS  
00001110                           113  
00001110  BCBC 00000000            114  chkSAdd     CMP.L   #0, D6
00001116  6700 002E                115              BEQ     wordModeS 
0000111A  BCBC 00000001            116              CMP.L   #1, D6
00001120  6700 002C                117              BEQ     longModeS
00001124  BCBC 00000004            118              CMP.L   #4, D6
0000112A  6700 002A                119              BEQ     immediateModeS
0000112E  4E75                     120              RTS
00001130                           121              
00001130  BABC 00000000            122  chkDAdd     CMP.L   #0, D5
00001136  6700 0026                123              BEQ     wordModeD 
0000113A  BABC 00000001            124              CMP.L   #1, D5
00001140  6700 0024                125              BEQ     longModeD
00001144  4E75                     126              RTS
00001146                           127     
00001146                           128  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
00001146  2A4E                     129  wordModeS   MOVEA.L A6, A5          *STORE WORD IN A5 SO IO CAN PRINT IT
00001148  544E                     130              ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
0000114A  4EF8 1104                131              JMP rtn_cAM
0000114E                           132              
0000114E                           133  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
0000114E  2A4E                     134  longModeS   MOVEA.L A6, A5          *STORE LING IN A5 SO IO CAN PRINT IT
00001150  584E                     135              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
00001152  4EF8 1104                136              JMP rtn_cAM
00001156                           137              
00001156                           138  *if immediate mode found get pointer to data in a5 so IO can print       
00001156  2A4E                     139  immediateModeS MOVEA.L  A6, A5
00001158  544E                     140                 ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
0000115A  4EF8 1104                141                 JMP rtn_cAM
0000115E                           142                 
0000115E                           143  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
0000115E  284E                     144  wordModeD   MOVEA.L A6, A4          *STORE WORD IN A4 SO IO CAN PRINT IT
00001160  544E                     145              ADDQ.W  #2, A6          *
00001162  4EF8 110E                146              JMP rtn_cAM2
00001166                           147              
00001166                           148  *IDENTICAL TO WORDMODED CLEAN UP LATER!       
00001166  284E                     149  longModeD   MOVEA.L A6, A4          *STORE LING IN A4 SO IO CAN PRINT IT
00001168  584E                     150              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
0000116A  4EF8 110E                151              JMP rtn_cAM2
0000116E                           152           
0000116E                           153  *CHECK FOR ERRORS CONTAINED IN SOURCE MODE      
0000116E  B8BC 00000005            154  sModeErr    CMP.L   #5, D4          *MODE CANNOT BE 5
00001174  6700 006E                155              BEQ     setEAErr
00001178  B8BC 00000006            156              CMP.L   #6, D4          *MODE CANNOT BE 6
0000117E  6700 0064                157              BEQ     setEAErr
00001182  B8BC 00000007            158              CMP.L   #7, D4          *IF MODE IS 7 CHECK REGISTERS FOR ERRORS
00001188  6700 003A                159              BEQ     sIErr
0000118C  4E75                     160              RTS
0000118E                           161      
0000118E                           162  *CHECK FOR ERRORS CONTAINED IN DESTINATION MODE        
0000118E  B6BC 00000001            163  dModeErr    CMP.L   #1, D3          *DESTINATION MODE CANNOT BE 1
00001194  6700 004E                164              BEQ     setEAErr
00001198  B6BC 00000007            165              CMP.L   #7, D3          *IF MODE IS 7 CHECK REGISTERS FOR ERRORS
0000119E  6700 0018                166              BEQ     dIErr
000011A2  B6BC 00000005            167              CMP.L   #5, D3          *MODE CANNOT BE 5
000011A8  6700 003A                168              BEQ     setEAErr
000011AC  B6BC 00000006            169              CMP.L   #6, D3          *MODE CANNOT BE 6
000011B2  6700 0030                170              BEQ     setEAErr
000011B6  4E75                     171              RTS
000011B8                           172   
000011B8                           173  *CHECK FOR ERRORS IN DESTINATION ADDRESSING MODES ABSOLUTE AND IMMEDIATE           
000011B8  BABC 00000001            174  dIErr       CMP.L   #1, D5          *DESTINATION REGISTER CANNOT BE GREATER THAN 1 WITH MODE 7
000011BE  6E00 0024                175              BGT     setEAErr
000011C2  4E75                     176              RTS
000011C4                           177      
000011C4                           178  *CHECK FOR ERRORS IN SOURCE ADDRESSING MODES ABSOLUTE AND IMMEDIATE        
000011C4  BCBC 00000002            179  sIErr       CMP.L   #2, D6          *REGISTER 2 CANNOT BE USED WITH MODE 7
000011CA  6700 0018                180              BEQ     setEAErr
000011CE  BCBC 00000003            181              CMP.L   #3, D6          *REGISTER 3 CANNOT BE USED WITH MODE 7
000011D4  6700 000E                182              BEQ     setEAErr
000011D8  BCBC 00000004            183              CMP.L   #4, D6          *ALL REGISTERS GREATER THAN 4 CANNOT BE USED WITH MODE 7
000011DE  6E00 0004                184              BGT     setEAErr
000011E2  4E75                     185              RTS
000011E4                           186              
000011E4                           187  *D2 WILL BE SET TO BEEF (MMM)FLAG IF ERRORS ARE FOUND IN EA
000011E4  4242                     188  setEAErr    CLR     D2
000011E6  343C BEEF                189              MOVE.W  #$BEEF, D2
000011EA  4E75                     190              RTS
000011EC                           191  
000011EC                           192  *SETS THE SOURCE REGISTER FOR A MOVE COMMAND TO D6          
000011EC  4246                     193  getSREG     CLR     D6
000011EE  2C07                     194              MOVE.L  D7, D6
000011F0  E18E                     195              LSL.L   #8, D6
000011F2  E18E                     196              LSL.L   #8, D6
000011F4  E18E                     197              LSL.L   #8, D6
000011F6  EB8E                     198              LSL.L   #5, D6
000011F8  E08E                     199              LSR.L   #8, D6
000011FA  E08E                     200              LSR.L   #8, D6
000011FC  E08E                     201              LSR.L   #8, D6
000011FE  EA8E                     202              LSR.L   #5, D6
00001200  4E75                     203              RTS
00001202                           204  
00001202                           205  *SETS DESTINATION REGISTER FOR MOVE COMMAND TO D5            
00001202  4245                     206  getDREG     CLR     D5
00001204  2A07                     207              MOVE.L  D7, D5
00001206  E18D                     208              LSL.L   #8, D5
00001208  E18D                     209              LSL.L   #8, D5
0000120A  E98D                     210              LSL.L   #4, D5
0000120C  E08D                     211              LSR.L   #8, D5
0000120E  E08D                     212              LSR.L   #8, D5
00001210  E08D                     213              LSR.L   #8, D5
00001212  EA8D                     214              LSR.L   #5, D5
00001214  4E75                     215              RTS
00001216                           216  
00001216                           217  *SETS SOURCE MODE FOR MOVE COMMAND TO D4            
00001216  4244                     218  getSMODE    CLR     D4
00001218  2807                     219              MOVE.L  D7, D4
0000121A  E18C                     220              LSL.L   #8, D4
0000121C  E18C                     221              LSL.L   #8, D4
0000121E  E18C                     222              LSL.L   #8, D4
00001220  E58C                     223              LSL.L   #2, D4
00001222  E08C                     224              LSR.L   #8, D4
00001224  E08C                     225              LSR.L   #8, D4
00001226  E08C                     226              LSR.L   #8, D4
00001228  EA8C                     227              LSR.L   #5, D4
0000122A  4E75                     228              RTS    
0000122C                           229  
0000122C                           230  *GETS DESTNATION MODE FROM MOVE COMMAND, PUTS IN D3
0000122C  4243                     231  getDMODE    CLR     D3
0000122E  2607                     232              MOVE.L  D7, D3
00001230  E18B                     233              LSL.L   #8, D3
00001232  E18B                     234              LSL.L   #8, D3
00001234  EF8B                     235              LSL.L   #7, D3
00001236  E08B                     236              LSR.L   #8, D3
00001238  E08B                     237              LSR.L   #8, D3
0000123A  E08B                     238              LSR.L   #8, D3
0000123C  EA8B                     239              LSR.L   #5, D3
0000123E  4E75                     240              RTS    
00001240                           241  
00001240                           242             
00001240                           243  *---------------------------------------------------------------------------------------------------------
00001240                           244  *isMOVEL           (IS MOVE.L)- TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 AND INSIDE 
00001240                           245  *                  D7 IS A KNOWN MOVE.L COMMAND.
00001240                           246  *
00001240                           247  *PRE CONDITIONS -  A6 POINTS TO CURRENT INSTRUCTION, D7 CONTAINS CURRENT INSTRUCTION
00001240                           248  *
00001240                           249  *POST CONDITIONS - D6, D5, D4, D3 CONTAIN SOURCE REGISTER, DESTINATION REGISTER, SOURCE MODE, DESTINATION
00001240                           250  *                  REGISTER RESPECTIVELY. iF ERRORS, D2 CONTAINS $BEEF (YUM). A6 POINTS TO NEXT INSTRUCTION 
00001240                           251  *                  TO DISASSEMBLE, IF A5 OR A4 CONTAIN NON-ZERO ADDRESSES, ABSOLUTE AND OR IMMEDIATE 
00001240                           252  *                  ADRESSING WAS USED AND DATA POINTED TO BY A5 AND OR A4 NEED TO BE PRINTED IN THAT ORDER.
00001240                           253  *--------------------------------------------------------------------------------------------------------- 
00001240  544E                     254  isMOVEL     ADDQ.W  #2, A6          *KEEP A6 CURRENT
00001242  4EB8 11EC                255              JSR     getSREG
00001246  4EB8 1202                256              JSR     getDREG
0000124A  4EB8 1216                257              JSR     getSMODE
0000124E  4EB8 122C                258              JSR     getDMODE
00001252  4EB8 116E                259              JSR     sModeErr        *CHECK FOR ERRORS IN REGISTERS D3 and D4 (source and destination modes)
00001256  4EB8 118E                260              JSR     dModeErr
0000125A  B4BC 0000BEEF            261              CMP.L   #$BEEF, D2      *CHECK FOR ERROR FLAG BEEF (MMM) AND RETURN IF SET
00001260  6600 0004                262              BNE     chkAddML        *CHECK ADDRESSING MODE FOR MOVEW SPECS
00001264  4E75                     263              RTS
00001266                           264              
00001266  2A7C 00000000            265  chkAddML    MOVEA.l  #0, A5         *CLEAR ADDRESS REGISTERS 5 AND 4
0000126C  287C 00000000            266              MOVEA.l  #0, A4 
00001272  B8BC 00000007            267              CMP.L    #7, D4         *IS SOURCE MODE 111?
00001278  6700 000E                268              BEQ      chkSAddL       *THEN CHECK FOR WORD, LONG, OR IMMEDIATE ADDRESSING
0000127C  B6BC 00000007            269  rtn_cAML    CMP.L    #7, D3         *IS DESTINATION REGISTER 111? 
00001282  6700 0024                270              BEQ      chkDAddL       *THEN CHECK FOR WORD OR LONG ADDRESSING
00001286  4E75                     271  rtn_cAM2L   RTS 
00001288                           272  
00001288  BCBC 00000000            273  chkSAddL    CMP.L   #0, D6
0000128E  6700 002E                274              BEQ     wordModeSL 
00001292  BCBC 00000001            275              CMP.L   #1, D6
00001298  6700 002C                276              BEQ     longModeSL
0000129C  BCBC 00000004            277              CMP.L   #4, D6
000012A2  6700 002A                278              BEQ     immediateModeSL
000012A6  4E75                     279              RTS
000012A8                           280              
000012A8  BABC 00000000            281  chkDAddL    CMP.L   #0, D5
000012AE  6700 0026                282              BEQ     wordModeDL 
000012B2  BABC 00000001            283              CMP.L   #1, D5
000012B8  6700 0024                284              BEQ     longModeDL
000012BC  4E75                     285              RTS
000012BE                           286              
000012BE  2A4E                     287  wordModeSL  MOVEA.L A6, A5          *STORE WORD IN A5 SO IO CAN PRINT IT
000012C0  544E                     288              ADDQ.W  #2, A6          *KEEP A6 ON CURRENT INSTRUCTION
000012C2  4EF8 127C                289              JMP rtn_cAML
000012C6                           290              
000012C6  2A4E                     291  longModeSL  MOVEA.L A6, A5          *STORE LING IN A5 SO IO CAN PRINT IT
000012C8  584E                     292              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
000012CA  4EF8 127C                293              JMP rtn_cAML
000012CE                           294              
000012CE                           295  *if immediate mode found get pointer to data in a5 so IO can print       
000012CE  2A4E                     296  immediateModeSL MOVEA.L  A6, A5
000012D0  584E                     297                  ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
000012D2  4EF8 127C                298                  JMP rtn_cAML
000012D6                           299              
000012D6                           300  *I HAVE NO IDEA IF THIS WORKS, MIGHT WANNA TEST SOME TIME SOON         
000012D6  284E                     301  wordModeDL  MOVEA.L A6, A4          *STORE WORD IN A4 SO IO CAN PRINT IT
000012D8  544E                     302              ADDQ.W  #2, A6          *
000012DA  4EF8 1286                303              JMP rtn_cAM2L
000012DE                           304              
000012DE                           305  *IDENTICAL TO WORDMODED CLEAN UP LATER!       
000012DE  284E                     306  longModeDL  MOVEA.L A6, A4          *STORE LING IN A4 SO IO CAN PRINT IT
000012E0  584E                     307              ADDQ.W  #4, A6          *KEEP A6 ON CURRENT INSTRUCTION
000012E2  4EF8 1286                308              JMP rtn_cAM2L 
000012E6                           309  
000012E6                           310  
000012E6                           311  
000012E6                           312  
000012E6                           313               
000012E6                           314  
000012E6                           315      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHKADDM             10EE
CHKADDMAW           1068
CHKADDML            1266
CHKDADD             1130
CHKDADDL            12A8
CHKSADD             1110
CHKSADDAW           1080
CHKSADDL            1288
DIERR               11B8
DMODEERR            118E
DMODEERRAW          105C
END                 1020
GETDMODE            122C
GETDREG             1202
GETSMODE            1216
GETSREG             11EC
IMMEDIATEMODES      1156
IMMEDIATEMODESAW    10B0
IMMEDIATEMODESL     12CE
ISMOVEAW            1026
ISMOVEBW            10B8
ISMOVEL             1240
LONGMODED           1166
LONGMODEDL          12DE
LONGMODES           114E
LONGMODESAW         10A8
LONGMODESL          12C6
RTN_CAM             1104
RTN_CAM2            110E
RTN_CAM2L           1286
RTN_CAMAW           107E
RTN_CAML            127C
SETEAERR            11E4
SIERR               11C4
SMODEERR            116E
START               1000
WORDMODED           115E
WORDMODEDL          12D6
WORDMODES           1146
WORDMODESAW         10A0
WORDMODESL          12BE
