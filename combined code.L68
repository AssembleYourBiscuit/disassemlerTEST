00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 5/26/2015 6:16:25 PM

00000000                             1  
00000000                             2  *-----------------------------------------------------------
00000000                             3  * Title      :
00000000                             4  * Written by :
00000000                             5  * Date       :
00000000                             6  * Description:
00000000                             7  *-----------------------------------------------------------
00000000                             8  
00000000                             9  *-----------------------------------------------------------
00000000                            10  * Title      :
00000000                            11  * Written by :
00000000                            12  * Date       :
00000000                            13  * Description:
00000000                            14  *-----------------------------------------------------------
00000000                            15  
00000000                            16  
00000000  =0000000D                 17  CR          EQU     $0D
00000000  =0000000A                 18  LF          EQU     $0A
00000000  =00000400                 19  starting    EQU     $00000400
00000000  =00FFFFFE                 20  ending      EQU     $00FFFFFE
00000000  =00010000                 21  outData     EQU     $10000
00000000  =00000009                 22  TAB         EQU     $09
00000000                            23  
00000000                            24  
00000000                            25  
00001000                            26      ORG    $1000
00001000                            27  
00001000                            28  START:                  ; first instruction of program
00001000                            29  * Put program code here
00001000  247C 00010000             30              MOVEA.L #outData, A2        ;This location is where disassembled instruction is stored
00001006                            31  
00001006                            32  
00001006                            33      
00001006                            34      
00001006                            35  
00001006  6000 0002                 36              BRA     WELCOME
0000100A                            37  
0000100A                            38      
0000100A  43F9 0000240C             39  welcome     LEA     WelcomeMsg,A1       ;Load welcome message
00001010  103C 000E                 40              MOVE.B  #14,D0              ;Display the welcome message
00001014  4E4F                      41              TRAP    #15                 ;to the user
00001016  43F9 0000243B             42              LEA     WrtBy,A1            ;Load the Writen by message
0000101C  103C 000E                 43              MOVE.B  #14,D0              ;Display the authority
00001020  4E4F                      44              TRAP    #15                 ;
00001022  327C 0000                 45              MOVEA   #$0,A1              ;Clear register A1
00001026  43F9 0000247E             46              LEA     note1,A1            ;Load precondition messages 
0000102C  103C 000E                 47              MOVE.B  #14,D0              ;
00001030  4E4F                      48              TRAP    #15                 ;and
00001032  43F9 00002490             49              LEA     note2,A1            ;Display
00001038  103C 000E                 50              MOVE.B  #14,D0              ;the
0000103C  4E4F                      51              TRAP    #15                 ;preconditions
0000103E  43F9 000024D5             52              LEA     note3,A1            ;message
00001044  103C 000E                 53              MOVE.B  #14,D0              ;
00001048  4E4F                      54              TRAP    #15                 ;
0000104A  43F9 0000250C             55              LEA     note4,A1            ;
00001050  103C 000E                 56              MOVE.B  #14,D0              ;
00001054  4E4F                      57              TRAP    #15                 ;
00001056                            58  
00001056  4EB9 0000106E             59  main        JSR     getStart
0000105C  4EB9 000010DE             60              JSR     getEnd              ;After done dealing with starting address, call getEnd
00001062  4EB9 00001216             61              JSR     LOOPDYDOOP
00001068  4EF9 000011CC             62              JMP     promptCont
0000106E                            63  *-----------------------------------------------------------------
0000106E                            64  * GET THE STARTING ADDRESS
0000106E                            65  *-----------------------------------------------------------------         
0000106E  43F9 0000254C             66  getStart    LEA     startLoc,A1         ;Load the prompting message startLoc
00001074  103C 000E                 67              MOVE.B  #14,D0              ;Display the prompt message for the starting location
00001078  4E4F                      68              TRAP    #15                 ;for the user to enter the starting location
0000107A  327C 0000                 69              MOVEA   #$0,A1              ;Clear A1 
0000107E  4246                      70              CLR     D6                  ;Clear D6 before using it
00001080  3279 00002640             71              MOVEA.W startAddr,A1        ;Make a pointer point to A1 access data to decode
00001086  7002                      72              MOVE.L  #2,d0               ;Get the user input (user input will store in (A1))
00001088  4E4F                      73              TRAP    #15                 ;(The length of the user input will store in D1)
0000108A  4EB9 00001148             74              JSR     validate            ;Validate and decode the user input and save the address in D6
00001090  B63C 0000                 75              CMP.B   #0,D3               ;Check if the input is invalid (while validating) 0=good,1=bad
00001094  6700 0012                 76              BEQ     checkRangeS         ;If yes (good), check the if the address is within the range
00001098  43F9 00002644             77  errMsgS     LEA     error,A1            ;Load the error message
0000109E  103C 000E                 78              MOVE.B  #14,D0              ;Display the error message
000010A2  4E4F                      79              TRAP    #15                 ;for the user to enter the starting location
000010A4  4EB8 106E                 80              JSR     getStart           
000010A8                            81  
000010A8  4EB9 000010CA             82  checkRangeS JSR     checkOdd            ;Check if the STARTING address is odd (bad)
000010AE  B63C 0001                 83              CMP.B   #1,D3               ;Check if the input is not odd (0=even, 1=odd)
000010B2  67E4                      84              BEQ     errMsgS             ;If =1, then print the input error message
000010B4  243C 00000400             85              MOVE.L  #starting,D2        ;Check if the address is less than the 
000010BA  BC82                      86              CMP.L   D2,D6               ;  specified starting address
000010BC  6DDA                      87              BLT     errMsgS             ;If yes, then print error message and prompt again
000010BE  243C 00FFFFFE             88              MOVE.L  #ending,D2          ;Check if the address is greater than the 
000010C4  BC82                      89              CMP.L   D2,D6               ;  specified ending address
000010C6  6ED0                      90              BGT     errMsgS             ;If yes, print input error msg and prompt for input again
000010C8  2C46                      91              MOVEA.L D6,A6               ;THE STARTING ADDRESS IS VALID, SAVE IT IN A6
000010CA                            92  
000010CA  4285                      93  checkOdd    CLR.L   D5                  ;Clear D2 
000010CC  3A06                      94              MOVE.W  D6,D5               ;Copy the address over to D5
000010CE  7402                      95              MOVE.L  #$00000002,D2       ;Put #2 into D2
000010D0  8AC2                      96              DIVU    D2,D5               ;Divide the address by 2
000010D2  4845                      97              SWAP    D5                  ;Swap the remainder and quotient (to access the remainder)
000010D4  BA3C 0001                 98              CMP.B   #$01,D5             ;Check if the remainder is 1 
000010D8  6700 00EA                 99              BEQ     badInput            ;If remainder=1, it means the address is odd
000010DC  4E75                     100              RTS 
000010DE                           101  *--------------------------------------------------------------
000010DE                           102  * GET THE ENDING ADDRESS
000010DE                           103  *--------------------------------------------------------------
000010DE  43F9 00002587            104  getEnd      LEA     endLoc,A1           ;Load the prompting message endLoc
000010E4  103C 000E                105              MOVE.B  #14,D0              ;Display the prompt message for the ending location
000010E8  4E4F                     106              TRAP    #15                 ;for the user to enter the ending location
000010EA  327C 0000                107              MOVEA   #$0,A1              ;clear A1
000010EE  4246                     108              CLR     D6                  ;Clear D6 before using it
000010F0  3279 00002642            109              MOVEA.W endAddr,A1          ;Make a pointer point to A1 for access data to decode
000010F6  7002                     110              MOVE.L  #2,d0               ;Get the user input 
000010F8  4E4F                     111              TRAP    #15                 ;(user input will store in (A1))
000010FA  4EB9 00001148            112              JSR     validate            ;Validate and decode the user input and save decoded addr in D6
00001100  B63C 0000                113              CMP.B   #0,D3               ;Check if the input is invalid (while validating) 0=good,1=bad
00001104  6700 0002                114              BEQ     checkRangeE         ;If yes (good), check the if the address is within the range
00001108  4EB8 10CA                115  checkRangeE JSR     checkOdd            ;Check if the ENDING address is odd (bad)
0000110C  B63C 0001                116              CMP.B   #1,D3               ;Check if the input is not odd (0=even, 1=odd)
00001110  6700 0026                117              BEQ     errMsgE             ;If =1, then print the input error message
00001114  243C 00000400            118              MOVE.L  #starting,D2        ;Check if the address is less than the 
0000111A  BC82                     119              CMP.L   D2,D6               ;  specified starting address
0000111C  6D00 001A                120              BLT     errMsgE             ;If yes, then print error message and prompt again
00001120  243C 00FFFFFE            121              MOVE.L  #ending,D2          ;Check if the address is greater than the 
00001126  BC82                     122              CMP.L   D2,D6               ;  specified ending address
00001128  6E00 000E                123              BGT     errMsgE             ;If yes, print input error msg and prompt for input again
0000112C  240E                     124              MOVE.L  A6,D2               ;Move the given (user) starting addr to D2 to compare with ending
0000112E  BC82                     125              CMP.L   D2,D6               ;Check if the address is less than the given starting address
00001130  6D00 0006                126              BLT     errMsgE             ;If yes, print the input error msg and prompt for input again
00001134  2A46                     127              MOVEA.L D6,A5               ;THE ENDING ADDRESS IS VALID, SAVE IT IN A5
00001136  4E75                     128              RTS            
00001138  43F9 00002644            129  errMsgE     LEA     error,A1            ;Load the error message
0000113E  103C 000E                130              MOVE.B  #14,D0              ;Display the error message
00001142  4E4F                     131              TRAP    #15                 ;for the user to enter the starting location
00001144  4EB8 10DE                132              JSR     getEnd 
00001148                           133  *---------------------------------------------------------------------
00001148                           134  * VALIDATE EACH DIGITS OF THE USER INPUT AND DECODE INTO ACTUAL VALUE
00001148                           135  * -- Check if the user input is not NULL or greater than 8 digits
00001148                           136  * -- Check each character if it is valid. If valid, decode it.
00001148                           137  * NOTE:
00001148                           138  *   --Using D5 to temporary store each digit to validate
00001148                           139  *   --Using D6 to store the converted address
00001148                           140  *   --Using D3 to store the good(0) and bad(1) inputs
00001148                           141  *---------------------------------------------------------------------
00001148  7400                     142  validate    MOVEQ   #$0,D2              ;Set D2 to 0 to compare if the input is null 
0000114A  B002                     143              CMP.B   D2,D0               ;Is the length of the user input = 0?
0000114C  6700 0076                144              BEQ     badInput            ;If yes return badInput
00001150  0C40 0008                145              CMPI    #$8,D0              ;Check if the length of the user input is 
00001154  6E00 006E                146              BGT     badInput            ;greater than 8 character. If yes, badInput
00001158  1A11                     147  valLoop     MOVE.B  (A1),D5             ;Validation Loop, validate character by character
0000115A  BA02                     148              CMP.B   D2,D5               ;Check if the next character is null
0000115C  6700 0066                149              BEQ     badInput            ;If null, return bad input
00001160  BA3C 0066                150              CMP.B   #$66,D5             ;66 is ascii value of character 'f', highest in the valid range 
00001164  6E00 005E                151              BGT     badInput            ;If this digit is greater than 66
00001168  BA3C 0060                152              CMP.B   #$60,D5             ;
0000116C  6E00 0022                153              BGT     conLCase            ;
00001170  BA3C 0046                154              CMP.B   #$46,D5             ;greater than 46?
00001174  6E00 004E                155              BGT     badInput            ;yes, then it's bad b/c it's between 'F' and 'a'
00001178  BA3C 0040                156              CMP.B   #$40,D5             ;greater than 40?
0000117C  6E00 001A                157              BGT     conUCase
00001180  BA3C 0039                158              CMP.B   #$39,D5             ;is this number is geater than 9?
00001184  6E00 003E                159              BGT     badInput
00001188  BA3C 0029                160              CMP.B   #$29,D5
0000118C  6E00 0020                161              BGT     conNum
00001190                           162              
00001190  0405 0057                163  conLCase    SUB.B   #$57,D5              ;Convert the ASCII value of lower-case to actual value
00001194  6000 0006                164              BRA     converted           ;After converted branch to converted to save
00001198  0405 0037                165  conUCase    SUB.B   #$37,D5              ;Convert the ASCII value of Upper-case to actual value
0000119C  E986                     166  converted   ASL.L   #4,D6               ;Arithmetic Shift Left, shif the 4 bits to the left (4zeros added at the end)
0000119E  DC05                     167              ADD.B   D5,D6               ;Now replace the 4 bits (0000) with the actual value
000011A0  5249                     168              ADDQ    #1,A1               ;Increment the address pointer, point to the next digit
000011A2  5301                     169              SUB.B   #1,D1               ;Decrement the length of the user input string
000011A4  B23C 0000                170              CMP.B   #0,D1               ;Check if the length is 0 (done with all the digits?)
000011A8  6700 001E                171              BEQ     goodInput           ;If yes, give signal as good input
000011AC  60AA                     172              BRA     valLoop             ;Else, keep validating the next digit
000011AE  0405 0030                173  conNum      SUB.B   #$30,D5             ;Convert the ASCII value of number to actual number
000011B2  E986                     174              ASL.L   #4,D6               ;Arithmetic Shift Left, shif the 4 bits to the left (4zeros added at the end)
000011B4  DC05                     175              ADD.B   D5,D6               ;Now replace the 4 bits (0000) with the actual number
000011B6  5249                     176              ADDQ    #1,A1               ;Increment the address pointer, point to the locatin of the next digit
000011B8  5301                     177              SUB.B   #1,D1               ;Decrement the length of the user input string
000011BA  B23C 0000                178              CMP.B   #0,D1               ;Check if the length is 0 (done with all the digits?)
000011BE  6700 0008                179              BEQ     goodInput           ;If yes, give signal as good input
000011C2  6094                     180              BRA     valLoop             ;Else, keep validating the next digit
000011C4  7601                     181  badInput    MOVEQ   #$1,D3              ;Give bad signal by
000011C6  4E75                     182              RTS                         ;Put #1 into D3 to represent the bad input
000011C8  7600                     183  goodInput   MOVEQ   #$0,D3              ;Give good signal by
000011CA  4E75                     184              RTS                         ;Put #0 into D3 to represent the good input
000011CC                           185  *----------------------END VALIDATION/DECODING------------------------------------
000011CC                           186  
000011CC                           187  
000011CC  43F9 000025C0            188  promptCont  LEA     AskToCont,A1
000011D2  103C 000E                189              MOVE.B  #14,D0
000011D6  4E4F                     190              TRAP    #15
000011D8  3279 0000263E            191              MOVEA.w string,A1           ;put 800 in register to use to point to the memory
000011DE  103C 0002                192              MOVE.B  #2, d0
000011E2  4E4F                     193              TRAP    #15
000011E4  0C11 0079                194              CMP.B   #$79, (A1)          ;Check if the user enter 'y'
000011E8  6700 FE6C                195              BEQ     main                ;If yes, branch to getaddress
000011EC  0C11 0059                196              CMP.B   #$59, (A1)          ;Check if the user enter 'Y'
000011F0  6700 FE64                197              BEQ     main                ;If yes, branch to getaddress
000011F4  0C11 006E                198              CMP.B   #$6e, (A1)          ;Check if the user input is 'n'
000011F8  6700 000A                199              BEQ     end                 ;If yes, brach to end
000011FC  0C11 004E                200              CMP.B   #$4e, (A1)          ;Check if the user input is 'N'
00001200  6700 0002                201              BEQ     end                 ;If yes, branch to end        
00001204                           202      
00001204                           203  
00001204  43F9 00002603            204  end         LEA     ThxMsg,A1           ;Load the Thank-you message
0000120A  103C 000E                205              MOVE.B  #14,D0              ;Print it out
0000120E  4E4F                     206              TRAP    #15    
00001210  103C 0009                207              MOVE.B  #9, d0          
00001214  4E4F                     208              TRAP    #15
00001216                           209  
00001216                           210             
00001216                           211  
00001216                           212  
00001216                           213  
00001216                           214  *******************************************************************************************************************************************************
00001216  224A                     215  LOOPDYDOOP          MOVEA.L A2, A1
00001218  4EB9 00001236            216                      JSR     DISASSEMBLE 
0000121E  14FC 000D                217                      MOVE.B  #$0D, (A2)+
00001222  14FC 000A                218                      MOVE.B  #$0A, (A2)+
00001226  14FC 0000                219                      MOVE.B  #$0, (A2)+
0000122A  103C 000E                220                      MOVE.B  #14, D0
0000122E  4E4F                     221                      TRAP    #15
00001230  BDCD                     222                      CMP.L   A5, A6
00001232  66E2                     223                      BNE     LOOPDYDOOP
00001234  4E75                     224                      RTS
00001236                           225  
00001236                           226  
00001236                           227  
00001236                           228  
00001236                           229  
00001236                           230                      
00001236                           231  
00001236                           232  
00001236                           233  
00001236                           234  *----------------------------------------------------------------------------------------------------
00001236                           235  * DISASSEMBLE: DISASSEMBLE HEXADECIMAL INSTRUCTION CODE TO MNEMONIC INSTRUCTION
00001236                           236  * PRECONDITION: - D2 AND D3 MUST NOT BE IN USED
00001236                           237  *               - A2 STORES AN APPROPRIATE MEMORY REGION ADDRESS
00001236                           238  *               - A6 STORES AN APPROPRIATE STARTING ADDRESS
00001236                           239  * POSTCONDITION: - IF THE INSTRUCTION IS DEFINED IN THE REQUIREMENT, THE STRING OF THE RESULT WILL BE
00001236                           240  *                  STORED IN OUTPUT MEMORY REGION POINTED BY A2
00001236                           241  *                - IF THE INSTRUCTION IS NOT IN THE REQUIREMENT, FOR NOW IT WILL BE IGNORED
00001236                           242  *----------------------------------------------------------------------------------------------------
00001236                           243  
00001236  3416                     244  DISASSEMBLE     MOVE.W      (A6), D2        ;RETRIEVE ORIGINAL INSTRUCTION TO D2 (NO CHANGE ALLOWED)
00001238  3602                     245                  MOVE.W      D2, D3          ;COPY ORIGINAL INSTRUCTION TO D3 (CHANGE ALLOW)
0000123A                           246  
0000123A  24CE                     247                  MOVE.L      A6, (A2)+       ;STORE THE ADDRESS OF THE INSTRUCTION
0000123C  14FC 0009                248                  MOVE.B      #TAB, (A2)+      ;STORE A TAB AFTER THE ADDRESS
00001240                           249  
00001240  E04B                     250                  LSR         #8, D3          ;GET THE FIRST 4 BITS
00001242  E84B                     251                  LSR         #4, D3
00001244                           252  
00001244  C6FC 0006                253                  MULU        #6, D3
00001248  47F9 00001254            254                  LEA         MAINTABLE, A3   ;LOAD INDEX INTO THE TABLE
0000124E  4EB3 3000                255                  JSR         0(A3, D3)       ;JUMP INDIRECT WITH INDEX
00001252                           256  
00001252  4E75                     257                  RTS                         ;FINISH DIASSEMBLING
00001254                           258                                  
00001254                           259  *----------------------------------------------------------------------------------------------------
00001254                           260  * MAINTABLE: THIS IS A PRIMARY JUMP TABLE FOR DETERMINING TYPES OF OPCODES INSTRUCTION BY LOOKING  AT
00001254                           261  *            THE FIRST 4 BITS IN THE HEXADECIMAL INSTRUCTION 
00001254                           262  *----------------------------------------------------------------------------------------------------
00001254  4EF9 000012B6            263  MAINTABLE       JMP         CODE0000
0000125A  4EF9 00001302            264                  JMP         CODE0001
00001260  4EF9 00001320            265                  JMP         CODE0010
00001266  4EF9 0000135A            266                  JMP         CODE0011
0000126C  4EF9 0000137E            267                  JMP         CODE0100
00001272  4EF9 000013C8            268                  JMP         CODE0101
00001278  4EF9 000013EA            269                  JMP         CODE0110
0000127E  4EF9 00001404            270                  JMP         CODE0111
00001284  4EF9 0000140A            271                  JMP         CODE1000
0000128A  4EF9 00001450            272                  JMP         CODE1001
00001290  4EF9 0000146E            273                  JMP         CODE1010
00001296  4EF9 00001476            274                  JMP         CODE1011
0000129C  4EF9 00001490            275                  JMP         CODE1100
000012A2  4EF9 000014B4            276                  JMP         CODE1101
000012A8  4EF9 000014DC            277                  JMP         CODE1110
000012AE  4EF9 000014DC            278                  JMP         CODE1111
000012B4  4E75                     279  FINISH          RTS
000012B6                           280  
000012B6                           281  *----------------------------------------------------------------------------------------------------
000012B6                           282  * CODE0000: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 0000 INTO BCLR, ORI, OR CMPI
000012B6                           283  *           INSTRUCTION
000012B6                           284  *----------------------------------------------------------------------------------------------------
000012B6  2602                     285  CODE0000        MOVE.L      D2, D3
000012B8  EF8B                     286                  LSL.L       #7, D3          ;SHIFT BITS TO GET THE 8TH BIT
000012BA  E08B                     287                  LSR.L       #8, D3
000012BC  EE8B                     288                  LSR.L       #7, D3
000012BE                           289  
000012BE  0C03 0001                290                  CMPI.B      #%1, D3         ;CHECK IF THE 8TH BIT IS EQUAL TO 1
000012C2  6700 0018                291                  BEQ         IFBCLR_DN       ;IF IT IS EQUAL, THE INSTRUCTION IS "BCLR DN, <EA>"
000012C6                           292  
000012C6  E98B                     293                  LSL.L       #4, D3          ;IF NOT, SHIFT BITS TO GET BIT 11, 10, AND 9 FOR FUTHER
000012C8  E08B                     294                  LSR.L       #8, D3          ;DISASSEMBLING
000012CA  EA8B                     295                  LSR.L       #5, D3
000012CC  C6FC 0006                296                  MULU        #6, D3
000012D0  47F9 000014E2            297                  LEA         TABLEZERO, A3   ;LOAD INDEX INTO THE TABLE
000012D6  4EB3 3000                298                  JSR         0(A3, D3)       ;JUMP INDIRECT WITH INDEX
000012DA  60D8                     299  RETURN0000      BRA         FINISH
000012DC                           300  
000012DC                           301  
000012DC  2602                     302  IFBCLR_DN       MOVE.L      D2, D3
000012DE  EF8B                     303                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7 AND 6
000012E0  E08B                     304                  LSR.L       #8, D3
000012E2  EA8B                     305                  LSR.L       #5, D3
000012E4  0C03 0006                306                  CMPI.B      #%110, D3       ;CHECK IF THE INSTRUCTION IS ACTUALLY "BCLR DN, <EA>"
000012E8  6600 0708                307                  BNE         INVALID_OPCODE  ;IF IT IS NOT, THEN THE OPCODE IS NOT DEFINED
000012EC  14FC 0042                308                  MOVE.B      #'B', (A2)+     ;OTHERWISE, IT IS ACTUALLY "BCLR DN, <EA>"
000012F0  14FC 0043                309                  MOVE.B      #'C', (A2)+
000012F4  14FC 004C                310                  MOVE.B      #'L', (A2)+
000012F8  14FC 0052                311                  MOVE.B      #'R', (A2)+
000012FC  14FC 0009                312                  MOVE.B      #TAB, (A2)+
00001300                           313                  ;JSR         ISBCLR_DN
00001300  60D8                     314                  BRA         RETURN0000
00001302                           315  
00001302                           316  *----------------------------------------------------------------------------------------------------
00001302                           317  * CODE0001: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 0001 INTO MOVE.B INSTRUCTION
00001302                           318  *----------------------------------------------------------------------------------------------------
00001302  14FC 004D                319  CODE0001        MOVE.B      #'M', (A2)+     ;THE INSTRUCTION IS MOVE.B
00001306  14FC 004F                320                  MOVE.B      #'O', (A2)+
0000130A  14FC 0056                321                  MOVE.B      #'V', (A2)+
0000130E  14FC 0045                322                  MOVE.B      #'E', (A2)+
00001312  14FC 002E                323                  MOVE.B      #'.', (A2)+
00001316  14FC 0042                324                  MOVE.B      #'B', (A2)+
0000131A  14FC 0009                325                  MOVE.B      #TAB, (A2)+
0000131E                           326                  ;JSR         ISMOVEB        ;CALL ISMOVEB TO DISASSEMBLE EFFECTIVE ADDRESS
0000131E  6094                     327                  BRA         FINISH
00001320                           328             
00001320                           329  *----------------------------------------------------------------------------------------------------
00001320                           330  * CODE0010: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 0010 INTO MOVE.L OR MOVEA.L
00001320                           331  *           INSTRUCTION
00001320                           332  *----------------------------------------------------------------------------------------------------
00001320  14FC 004D                333  CODE0010        MOVE.B      #'M', (A2)+
00001324  14FC 004F                334                  MOVE.B      #'O', (A2)+
00001328  14FC 0056                335                  MOVE.B      #'V', (A2)+
0000132C  14FC 0045                336                  MOVE.B      #'E', (A2)+
00001330  4EB9 00001346            337                  JSR         IFMOVEA
00001336  14FC 002E                338  IFMOVEL         MOVE.B      #'.', (A2)+
0000133A  14FC 004C                339                  MOVE.B      #'L', (A2)+
0000133E  14FC 0009                340                  MOVE.B      #TAB, (A2)+
00001342                           341                  ;JSR         ISMOVEL
00001342  6000 FF70                342                  BRA         FINISH
00001346                           343            
00001346  2602                     344  IFMOVEA         MOVE.L      D2, D3          ;MAKE A COPY OF ORIGINAL INSTRUCTION TO D3
00001348  EF8B                     345                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7 AND 6
0000134A  E08B                     346                  LSR.L       #8, D3
0000134C  EA8B                     347                  LSR.L       #5, D3
0000134E  0C43 0001                348                  CMPI.W      #%001, D3       ;CHECK IF THIS INSTRUCTION IS MOVEA
00001352  66E2                     349                  BNE         IFMOVEL         ;IF THE INSTRUCTION IS NOT MOVEA, IT MUST BE MOVE
00001354  14FC 0041                350                  MOVE.B      #'A',(A2)+      ;OTHERWISE, IT IS MOVEA.
00001358  4E75                     351                  RTS
0000135A                           352  
0000135A                           353  *----------------------------------------------------------------------------------------------------
0000135A                           354  * CODE0011: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 0011 INTO MOVE.W OR MOVEA.W
0000135A                           355  *           INSTRUCTION
0000135A                           356  *----------------------------------------------------------------------------------------------------
0000135A  14FC 004D                357  CODE0011        MOVE.B      #'M', (A2)+
0000135E  14FC 004F                358                  MOVE.B      #'O', (A2)+
00001362  14FC 0056                359                  MOVE.B      #'V', (A2)+
00001366  14FC 0045                360                  MOVE.B      #'E', (A2)+
0000136A  4EB8 1346                361                  JSR         IFMOVEA
0000136E  14FC 002E                362  IFMOVEW         MOVE.B      #'.', (A2)+
00001372  14FC 0057                363                  MOVE.B      #'W', (A2)+
00001376  14FC 0009                364                  MOVE.B      #TAB, (A2)+
0000137A                           365                  ;JSR         ISMOVEB
0000137A  6000 FF38                366                  BRA         FINISH
0000137E                           367  
0000137E                           368  *----------------------------------------------------------------------------------------------------
0000137E                           369  * CODE0100: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 0100 INTO MOVEM, DIVS, LEA, NEG,
0000137E                           370  *           JSR, OR RTS INSTRUCTION
0000137E                           371  *----------------------------------------------------------------------------------------------------
0000137E  2602                     372  CODE0100        MOVE.L      D2, D3
00001380  EF8B                     373                  LSL.L       #7, D3          ;SHIFT BITS TO GET THE 8TH BIT
00001382  E08B                     374                  LSR.L       #8, D3
00001384  EE8B                     375                  LSR.L       #7, D3
00001386                           376  
00001386  0C03 0001                377                  CMPI.B      #%1, D3         ;CHECK IF THE 8TH BIT IS EQUAL TO 1
0000138A  6700 001A                378                  BEQ         IFLEA             ;IF IT IS EQUAL, THE INSTRUCTION IS "LEA"
0000138E                           379  
0000138E  E98B                     380                  LSL.L       #4, D3          ;IF NOT, SHIFT BITS TO GET BIT 11, 10, AND 9 FOR FUTHER
00001390  E08B                     381                  LSR.L       #8, D3          ;DISASSEMBLING
00001392  EA8B                     382                  LSR.L       #5, D3
00001394  C6FC 0006                383                  MULU        #6, D3
00001398  47F9 000015A2            384                  LEA         TABLEFOUR, A3   ;LOAD INDEX INTO THE TABLE
0000139E  4EB3 3000                385                  JSR         0(A3, D3)       ;JUMP INDIRECT WITH INDEX
000013A2  6000 FF10                386  RETURN0100      BRA         FINISH
000013A6                           387  
000013A6                           388  
000013A6  2602                     389  IFLEA           MOVE.L      D2, D3
000013A8  EF8B                     390                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7 AND 6
000013AA  E08B                     391                  LSR.L       #8, D3
000013AC  EA8B                     392                  LSR.L       #5, D3
000013AE  0C03 0007                393                  CMPI.B      #%111, D3       ;CHECK IF THE INSTRUCTION IS ACTUALLY "LEA"
000013B2  6600 063E                394                  BNE         INVALID_OPCODE  ;IF IT IS NOT, THEN THE OPCODE IS NOT DEFINED
000013B6  14FC 004C                395                  MOVE.B      #'L', (A2)+     ;OTHERWISE, IT IS ACTUALLY "LEA"
000013BA  14FC 0045                396                  MOVE.B      #'E', (A2)+
000013BE  14FC 0041                397                  MOVE.B      #'A', (A2)+
000013C2  14FC 0009                398                  MOVE.B      #TAB, (A2)+
000013C6                           399                  ;JSR         ISLEA
000013C6  60DA                     400                  BRA         RETURN0100
000013C8                           401  
000013C8                           402  *----------------------------------------------------------------------------------------------------
000013C8                           403  * CODE0101: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 0101 INTO SUBQ INSTRUCTION
000013C8                           404  *----------------------------------------------------------------------------------------------------
000013C8  14FC 0053                405  CODE0101        MOVE.B      #'S', (A2)+
000013CC  14FC 0055                406                  MOVE.B      #'U', (A2)+
000013D0  14FC 0042                407                  MOVE.B      #'B', (A2)+
000013D4  14FC 0051                408                  MOVE.B      #'Q', (A2)+
000013D8  14FC 002E                409                  MOVE.B      #'.', (A2)+
000013DC  4EB9 000019AC            410                  JSR         GET_SIZE
000013E2  14FC 0009                411                  MOVE.B      #TAB, (A2)+
000013E6                           412                  ;JSR         EASUBQ
000013E6  6000 FECC                413                  BRA         FINISH
000013EA                           414  
000013EA                           415  *----------------------------------------------------------------------------------------------------
000013EA                           416  * CODE0110: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 0110 INTO OR BCC, BCS, BGE, BLT,
000013EA                           417  *       BVC, OR BRA INSTRUCTION
000013EA                           418  *----------------------------------------------------------------------------------------------------
000013EA  2602                     419  CODE0110        MOVE.L      D2, D3          ;MAKE A COPY OF INSTRUCTION TO D3
000013EC  E98B                     420                  LSL.L       #4, D3          ;SHIFT BITS TO GET BIT 11 TO 8
000013EE  E08B                     421                  LSR.L       #8, D3
000013F0  E88B                     422                  LSR.L       #4, D3
000013F2                           423  
000013F2  C6FC 0006                424                  MULU        #6, D3
000013F6  47F9 000016A6            425                  LEA         TABLESIX, A3
000013FC  4EB3 3000                426                  JSR         0(A3, D3)
00001400  6000 FEB2                427                  BRA         FINISH
00001404                           428  
00001404                           429  *----------------------------------------------------------------------------------------------------
00001404                           430  * CODE0111: HEXADECIMAL INSTRUCTION STARTING WITH 0111 IS NOT DEFINED
00001404                           431  *----------------------------------------------------------------------------------------------------
00001404  6600 05EC                432  CODE0111        BNE         INVALID_OPCODE  ;THE OPCODE IS NOT DEFINED
00001408  4E75                     433                  RTS
0000140A                           434  
0000140A                           435  *----------------------------------------------------------------------------------------------------
0000140A                           436  * CODE1000: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 1000 INTO OR INSTRUCTION
0000140A                           437  *----------------------------------------------------------------------------------------------------
0000140A  3602                     438  CODE1000        MOVE.W      D2, D3          ;MAKE A COPY OF ORIGINAL INSTRUCTION TO D3
0000140C  EF8B                     439                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7, AND 6
0000140E  E08B                     440                  LSR.L       #8, D3
00001410  EA8B                     441                  LSR.L       #5, D3
00001412  0C43 0007                442                  CMPI.W      #%111, D3       ;CHECK IF THIS INSTRUCTION IS DIVS
00001416  6700 000A                443                  BEQ         IFDIVS
0000141A  6000 001C                444                  BRA         IFOR
0000141E  6000 FE94                445  RETURN1000      BRA         FINISH
00001422                           446  
00001422                           447  
00001422  14FC 0044                448  IFDIVS          MOVE.B      #'D', (A2)+
00001426  14FC 0049                449                  MOVE.B      #'I', (A2)+
0000142A  14FC 0056                450                  MOVE.B      #'V', (A2)+
0000142E  14FC 0053                451                  MOVE.B      #'S', (A2)+
00001432  14FC 0009                452                  MOVE.B      #TAB, (A2)+
00001436                           453                  ;JSR        ISDIVS
00001436  60E6                     454                  BRA         RETURN1000
00001438                           455  
00001438  14FC 004F                456  IFOR            MOVE.B      #'O', (A2)+
0000143C  14FC 0052                457                  MOVE.B      #'R', (A2)+
00001440  14FC 002E                458                  MOVE.B      #'.', (A2)+
00001444  4EB9 0000193A            459                  JSR         GET_OPMODE
0000144A  14FC 0009                460                  MOVE.B      #TAB, (A2)+
0000144E                           461                  ;JSR        ISOR
0000144E  60CE                     462                  BRA         RETURN1000
00001450                           463  
00001450                           464  
00001450                           465  *----------------------------------------------------------------------------------------------------
00001450                           466  * CODE1001: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 1001 INTO SUB INSTRUCTION
00001450                           467  *----------------------------------------------------------------------------------------------------
00001450  14FC 0053                468  CODE1001        MOVE.B      #'S', (A2)+
00001454  14FC 0055                469                  MOVE.B      #'U', (A2)+
00001458  14FC 0042                470                  MOVE.B      #'B', (A2)+
0000145C  14FC 002E                471                  MOVE.B      #'.', (A2)+
00001460  4EB9 0000193A            472                  JSR         GET_OPMODE
00001466  14FC 0009                473                  MOVE.B      #TAB, (A2)+
0000146A                           474                  ;JSR        ISSUB      
0000146A  6000 FE48                475                  BRA         FINISH
0000146E                           476  
0000146E                           477  *----------------------------------------------------------------------------------------------------
0000146E                           478  * CODE1010: HEXADECIMAL INSTRUCTION STARTING WITH 1010 IS NOT DEFINED
0000146E                           479  *----------------------------------------------------------------------------------------------------
0000146E  6600 0582                480  CODE1010        BNE         INVALID_OPCODE  ;THE OPCODE IS NOT DEFINED
00001472  6000 FE40                481                  BRA         FINISH
00001476                           482  
00001476                           483  *----------------------------------------------------------------------------------------------------
00001476                           484  * CODE1011: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 1011 INTO EOR OR CMP INSTRUCTION
00001476                           485  *----------------------------------------------------------------------------------------------------
00001476  2602                     486  CODE1011        MOVE.L      D2, D3          ;MAKE A COPY OF INSTRUCTION TO D3
00001478  EF8B                     487                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7, AND 6
0000147A  E08B                     488                  LSR.L       #8, D3
0000147C  EA8B                     489                  LSR.L       #5, D3
0000147E                           490  
0000147E  C6FC 0006                491                  MULU        #6, D3
00001482  47F9 000017CC            492                  LEA         TABLEELEVEN, A3
00001488  4EB3 3000                493                  JSR         0(A3, D3)
0000148C  6000 FE26                494                  BRA         FINISH
00001490                           495  
00001490                           496  *----------------------------------------------------------------------------------------------------
00001490                           497  * CODE1100: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 1100 INTO MULS INSTRUCTION
00001490                           498  *----------------------------------------------------------------------------------------------------
00001490  3602                     499  CODE1100        MOVE.W      D2, D3          ;MAKE A COPY OF ORIGINAL INSTRUCTION TO D3
00001492  EF8B                     500                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7, AND 6
00001494  E08B                     501                  LSR.L       #8, D3
00001496  EA8B                     502                  LSR.L       #5, D3
00001498  0C43 0007                503                  CMPI.W      #%111, D3       ;CHECK IF THIS INSTRUCTION IS MULS
0000149C  6600 0554                504                  BNE         INVALID_OPCODE
000014A0  14FC 004D                505                  MOVE.B      #'M', (A2)+
000014A4  14FC 0055                506                  MOVE.B      #'U', (A2)+
000014A8  14FC 004C                507                  MOVE.B      #'L', (A2)+
000014AC  14FC 0053                508                  MOVE.B      #'S', (A2)+
000014B0                           509                  ;JSR         ISMULS
000014B0  6000 FE02                510                  BRA         FINISH
000014B4                           511  
000014B4                           512  
000014B4                           513  *----------------------------------------------------------------------------------------------------
000014B4                           514  * CODE1101: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 1101 INTO ADDA INSTRUCTION
000014B4                           515  *----------------------------------------------------------------------------------------------------
000014B4  14FC 0041                516  CODE1101        MOVE.B      #'A', (A2)+
000014B8  14FC 0044                517                  MOVE.B      #'D', (A2)+
000014BC  14FC 0044                518                  MOVE.B      #'D', (A2)+
000014C0                           519  
000014C0  EF8B                     520                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7, AND 6
000014C2  E08B                     521                  LSR.L       #8, D3
000014C4  EA8B                     522                  LSR.L       #5, D3
000014C6                           523  
000014C6  C6FC 0006                524                  MULU        #6, D3
000014CA  47F9 000018B0            525                  LEA         TABLETHIRTEEN, A3
000014D0  4EB3 3000                526                  JSR         0(A3, D3)
000014D4                           527  
000014D4  14FC 0009                528                  MOVE.B      #TAB, (A2)+
000014D8                           529  
000014D8  6000 FDDA                530                  BRA         FINISH
000014DC                           531  
000014DC                           532  *----------------------------------------------------------------------------------------------------
000014DC                           533  * CODE1110: DISASSEMBLE THE HEXADECIMAL INSTRUCTION STARTING WITH 1110 INTO LSR, LSL, ASR, ASL, ROL,
000014DC                           534  *           OR ROR INSTRUCTION
000014DC                           535  *----------------------------------------------------------------------------------------------------
000014DC                           536  CODE1110
000014DC                           537  ; LSR
000014DC                           538  ; LSL
000014DC                           539  ; ASR
000014DC                           540  ; ASL
000014DC                           541  ; ROL
000014DC                           542  ; ROR
000014DC                           543  
000014DC                           544  TABLEFOURTEEN
000014DC                           545  *----------------------------------------------------------------------------------------------------
000014DC                           546  * CODE1111: HEXADECIMAL INSTRUCTION STARTING WITH 1111 IS NOT DEFINED
000014DC                           547  *----------------------------------------------------------------------------------------------------
000014DC  6600 0514                548  CODE1111        BNE         INVALID_OPCODE  ;THE OPCODE IS NOT DEFINED
000014E0  4E75                     549                  RTS
000014E2                           550  
000014E2                           551  
000014E2                           552  
000014E2                           553  *----------------------------------------------------------------------------------------------------
000014E2                           554  * TABLEZERO: THIS IS FUNCTION FOR DETERMINING OPMODE OF THE HEXADECIMAL INSTRUCTION THAT STARED WITH
000014E2                           555  *            0000
000014E2                           556  *----------------------------------------------------------------------------------------------------
000014E2  4EF9 00001514            557  TABLEZERO       JMP         ZERO000
000014E8  4EF9 00001530            558                  JMP         ZERO001
000014EE  4EF9 00001538            559                  JMP         ZERO010
000014F4  4EF9 00001540            560                  JMP         ZERO011
000014FA  4EF9 00001548            561                  JMP         ZERO100
00001500  4EF9 0000156E            562                  JMP         ZERO101
00001506  4EF9 00001576            563                  JMP         ZERO110
0000150C  4EF9 00001598            564                  JMP         ZERO111
00001512  4E75                     565  RETURN_ZERO     RTS
00001514                           566  
00001514                           567              
00001514  14FC 004F                568  ZERO000         MOVE.B      #'O', (A2)+
00001518  14FC 0052                569                  MOVE.B      #'R', (A2)+
0000151C  14FC 0049                570                  MOVE.B      #'I', (A2)+
00001520  14FC 002E                571                  MOVE.B      #'.', (A2)+
00001524  4EB9 000019AC            572                  JSR         GET_SIZE
0000152A  14FC 0009                573                  MOVE.B      #TAB, (A2)+
0000152E                           574                  ;JSR         ISORI
0000152E  60E2                     575                  BRA         RETURN_ZERO
00001530                           576  
00001530                           577  
00001530  4EB9 000019F2            578  ZERO001         JSR         INVALID_OPCODE
00001536  60DA                     579                  BRA         RETURN_ZERO
00001538                           580  
00001538  4EB9 000019F2            581  ZERO010         JSR         INVALID_OPCODE
0000153E  60D2                     582                  BRA         RETURN_ZERO
00001540                           583  
00001540                           584  
00001540  4EB9 000019F2            585  ZERO011         JSR         INVALID_OPCODE
00001546  60CA                     586                  BRA         RETURN_ZERO
00001548                           587  
00001548                           588  
00001548  3602                     589  ZERO100         MOVE.W      D2, D3
0000154A  EF8B                     590                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7 AND 6
0000154C  EC8B                     591                  LSR.L       #6, D3
0000154E  EE8B                     592                  LSR.L       #7, D3
00001550  0C03 0002                593                  CMPI.B      #%010, D3       ;CHECK IF THE INSTRUCTION IS ACTUALLY "BCLF #<DATA>, <EA>"
00001554  6600 049C                594                  BNE         INVALID_OPCODE  ;IF IT IS NOT, THEN THE OPCODE IS NOT DEFINED
00001558  14FC 0042                595                  MOVE.B      #'B', (A2)+     ;OTHERWISE, IT IS ACTUALLY "BCLF #<DATA>, <EA>"
0000155C  14FC 0043                596                  MOVE.B      #'C', (A2)+
00001560  14FC 004C                597                  MOVE.B      #'L', (A2)+
00001564  14FC 0052                598                  MOVE.B      #'R', (A2)+
00001568  14FC 0009                599                  MOVE.B      #TAB, (A2)+
0000156C                           600                  ;JSR         ISBCLR
0000156C  60A4                     601                  BRA         RETURN_ZERO
0000156E                           602  
0000156E                           603  
0000156E  4EB9 000019F2            604  ZERO101         JSR         INVALID_OPCODE
00001574  609C                     605                  BRA         RETURN_ZERO
00001576                           606  
00001576                           607  
00001576  14FC 0043                608  ZERO110         MOVE.B      #'C', (A2)+
0000157A  14FC 004D                609                  MOVE.B      #'M', (A2)+
0000157E  14FC 0050                610                  MOVE.B      #'P', (A2)+
00001582  14FC 0049                611                  MOVE.B      #'I', (A2)+
00001586  14FC 002E                612                  MOVE.B      #'.', (A2)+
0000158A  4EB9 000019AC            613                  JSR         GET_SIZE
00001590  14FC 0009                614                  MOVE.B      #TAB, (A2)+
00001594                           615                  ;JSR         ISCMPI
00001594  6000 FF7C                616                  BRA         RETURN_ZERO
00001598                           617  
00001598  4EB9 000019F2            618  ZERO111         JSR         INVALID_OPCODE
0000159E  6000 FF72                619                  BRA         RETURN_ZERO
000015A2                           620  
000015A2                           621  *----------------------------------------------------------------------------------------------------
000015A2                           622  * TABLEFOUR:
000015A2                           623  *----------------------------------------------------------------------------------------------------
000015A2  4EF9 000015D4            624  TABLEFOUR       JMP         FOUR000
000015A8  4EF9 000015DC            625                  JMP         FOUR001
000015AE  4EF9 000015E4            626                  JMP         FOUR010
000015B4  4EF9 000015F6            627                  JMP         FOUR011
000015BA  4EF9 000015FE            628                  JMP         FOUR100
000015C0  4EF9 0000164E            629                  JMP         FOUR101
000015C6  4EF9 00001658            630                  JMP         FOUR110
000015CC  4EF9 0000165A            631                  JMP         FOUR111
000015D2  4E75                     632  RETURN_FOUR     RTS
000015D4                           633  
000015D4                           634  
000015D4  4EB9 000019F2            635  FOUR000         JSR         INVALID_OPCODE
000015DA  60F6                     636                  BRA         RETURN_FOUR
000015DC                           637  
000015DC                           638  
000015DC  4EB9 000019F2            639  FOUR001         JSR         INVALID_OPCODE
000015E2  60EE                     640                  BRA         RETURN_FOUR
000015E4                           641  
000015E4                           642  
000015E4  14FC 004E                643  FOUR010         MOVE.B      #'N', (A2)+     ;OTHERWISE, IT IS ACTUALLY "BCLF #<DATA>, <EA>"
000015E8  14FC 0045                644                  MOVE.B      #'E', (A2)+
000015EC  14FC 0047                645                  MOVE.B      #'G', (A2)+
000015F0  14FC 0009                646                  MOVE.B      #TAB, (A2)+
000015F4                           647                  ;JSR         ISNEG
000015F4  60DC                     648                  BRA         RETURN_FOUR
000015F6                           649  
000015F6                           650  
000015F6  4EB9 000019F2            651  FOUR011         JSR         INVALID_OPCODE
000015FC  60D4                     652                  BRA         RETURN_FOUR
000015FE                           653  
000015FE                           654  
000015FE  14FC 004D                655  FOUR100         MOVE.B      #'M', (A2)+     ;OTHERWISE, IT IS ACTUALLY "BCLF #<DATA>, <EA>"
00001602  14FC 004F                656                  MOVE.B      #'O', (A2)+
00001606  14FC 0056                657                  MOVE.B      #'V', (A2)+
0000160A  14FC 0045                658                  MOVE.B      #'E', (A2)+
0000160E  14FC 004D                659                  MOVE.B      #'M', (A2)+
00001612  14FC 002E                660                  MOVE.B      #'.', (A2)+
00001616  4EB9 00001622            661                  JSR         IFMOVEMW
0000161C  14FC 0009                662  FOUR100_CONT    MOVE.B      #TAB, (A2)+
00001620                           663                  *JSR         ISMOVEM
00001620  60B0                     664                  BRA         RETURN_FOUR
00001622                           665  
00001622  3602                     666  IFMOVEMW        MOVE.W      D2, D3
00001624  EF8B                     667                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7 AND 6
00001626  EC8B                     668                  LSR.L       #6, D3
00001628  EE8B                     669                  LSR.L       #7, D3
0000162A  0C03 0002                670                  CMPI.B      #%010, D3       ;CHECK IF THE INSTRUCTION IS ACTUALLY "MOVEM.W"
0000162E  6600 0008                671                  BNE         IFMOVEML        ;IF IT IS NOT, CHECK IF IT IS MOVEM.L
00001632  14FC 0057                672                  MOVE.B      #'W', (A2)+
00001636  4E75                     673                  RTS
00001638                           674  
00001638  3602                     675  IFMOVEML        MOVE.W      D2, D3
0000163A  EF8B                     676                  LSL.L       #7, D3          ;SHIFT BITS TO GET BIT 8, 7 AND 6
0000163C  EC8B                     677                  LSR.L       #6, D3
0000163E  EE8B                     678                  LSR.L       #7, D3
00001640  0C03 0003                679                  CMPI.B      #%011, D3       ;CHECK IF THE INSTRUCTION IS ACTUALLY "MOVEM.L"
00001644  6600 03AC                680                  BNE         INVALID_OPCODE  ;IF IT IS NOT, THEN THE OPCODE IS NOT DEFINED
00001648  14FC 004C                681                  MOVE.B      #'L', (A2)+
0000164C  60CE                     682                  BRA         FOUR100_CONT
0000164E                           683  
0000164E                           684  
0000164E  4EB9 000019F2            685  FOUR101         JSR         INVALID_OPCODE
00001654  6000 FF7C                686                  BRA         RETURN_FOUR
00001658                           687  
00001658                           688  
00001658  60A4                     689  FOUR110         BRA         FOUR100
0000165A                           690  
0000165A                           691  
0000165A  3602                     692  FOUR111         MOVE.W      D2, D3
0000165C  E18B                     693                  LSL.L       #8, D3          ;SHIFT BITS TO GET BIT 7 TO 0
0000165E  E08B                     694                  LSR.L       #8, D3
00001660  0C03 0075                695                  CMPI.B      #%01110101, D3  ;CHECK IF THE INSTRUCTION IS ACTUALLY "RTS"
00001664  6600 001C                696                  BNE         IFJSR
00001668  6000 0004                697                  BRA         IFRTS
0000166C  60AE                     698                  BRA         FOUR100_CONT
0000166E                           699  
0000166E  14FC 0052                700  IFRTS           MOVE.B      #'R', (A2)+
00001672  14FC 0054                701                  MOVE.B      #'T', (A2)+
00001676  14FC 0053                702                  MOVE.B      #'S', (A2)+
0000167A  14FC 0009                703                  MOVE.B      #TAB, (A2)+
0000167E                           704                  ;JSR        ISRTS
0000167E  6000 FF52                705                  BRA         RETURN_FOUR
00001682                           706  
00001682                           707  
00001682  3602                     708  IFJSR           MOVE.W      D2, D3
00001684  E18B                     709                  LSL.L       #8, D3          ;SHIFT BITS TO GET BIT 7 AND 6
00001686  E08B                     710                  LSR.L       #8, D3
00001688  EC8B                     711                  LSR.L       #6, D3
0000168A  0C03 000A                712                  CMPI.B      #10, D3         ;CHECK IF THE INSTRUCTION IS ACTUALLY "JSR"
0000168E  6600 0362                713                  BNE         INVALID_OPCODE
00001692  14FC 004A                714                  MOVE.B      #'J', (A2)+
00001696  14FC 0053                715                  MOVE.B      #'S', (A2)+
0000169A  14FC 0052                716                  MOVE.B      #'R', (A2)+
0000169E  14FC 0009                717                  MOVE.B      #TAB, (A2)+
000016A2                           718                  ;JSR        ISJSR
000016A2  6000 FF2E                719                  BRA         RETURN_FOUR
000016A6                           720  
000016A6                           721  *----------------------------------------------------------------------------------------------------
000016A6                           722  * TABLESIX:
000016A6                           723  *----------------------------------------------------------------------------------------------------
000016A6  4EF9 00001708            724  TABLESIX        JMP         SIX0000
000016AC  4EF9 0000171A            725                  JMP         SIX0001
000016B2  4EF9 00001722            726                  JMP         SIX0010
000016B8  4EF9 0000172A            727                  JMP         SIX0011
000016BE  4EF9 00001732            728                  JMP         SIX0100
000016C4  4EF9 00001744            729                  JMP         SIX0101
000016CA  4EF9 00001756            730                  JMP         SIX0110
000016D0  4EF9 0000175E            731                  JMP         SIX0111
000016D6  4EF9 00001766            732                  JMP         SIX1000
000016DC  4EF9 00001778            733                  JMP         SIX1001
000016E2  4EF9 00001780            734                  JMP         SIX1010
000016E8  4EF9 0000178A            735                  JMP         SIX1011
000016EE  4EF9 00001794            736                  JMP         SIX1100
000016F4  4EF9 000017A8            737                  JMP         SIX1101
000016FA  4EF9 000017B8            738                  JMP         SIX1110
00001700  4EF9 000017C2            739                  JMP         SIX1111
00001706  4E75                     740  RETURN_SIX      RTS
00001708                           741  
00001708                           742  
00001708  14FC 0042                743  SIX0000         MOVE.B      #'B', (A2)+
0000170C  14FC 0052                744                  MOVE.B      #'R', (A2)+
00001710  14FC 0041                745                  MOVE.B      #'A', (A2)+
00001714  14FC 0009                746                  MOVE.B      #TAB, (A2)+
00001718                           747                  ;JSR        ISBRA
00001718  60EC                     748                  BRA         RETURN_SIX
0000171A                           749  
0000171A                           750  
0000171A  4EB9 000019F2            751  SIX0001         JSR         INVALID_OPCODE
00001720  60E4                     752                  BRA         RETURN_SIX
00001722                           753  
00001722                           754  
00001722  4EB9 000019F2            755  SIX0010         JSR         INVALID_OPCODE
00001728  60DC                     756                  BRA         RETURN_SIX
0000172A                           757  
0000172A                           758  
0000172A  4EB9 000019F2            759  SIX0011         JSR         INVALID_OPCODE
00001730  60D4                     760                  BRA         RETURN_SIX
00001732                           761  
00001732                           762  
00001732  14FC 0042                763  SIX0100         MOVE.B      #'B', (A2)+
00001736  14FC 0043                764                  MOVE.B      #'C', (A2)+
0000173A  14FC 0043                765                  MOVE.B      #'C', (A2)+
0000173E  14FC 0009                766                  MOVE.B      #TAB, (A2)+
00001742                           767                  ;JSR        ISBRA
00001742  60C2                     768                  BRA         RETURN_SIX
00001744                           769  
00001744                           770  
00001744  14FC 0042                771  SIX0101         MOVE.B      #'B', (A2)+
00001748  14FC 0043                772                  MOVE.B      #'C', (A2)+
0000174C  14FC 0053                773                  MOVE.B      #'S', (A2)+
00001750  14FC 0009                774                  MOVE.B      #TAB, (A2)+
00001754                           775                  ;JSR        ISBRA
00001754  60B0                     776                  BRA         RETURN_SIX
00001756                           777  
00001756                           778  
00001756  4EB9 000019F2            779  SIX0110         JSR         INVALID_OPCODE
0000175C  60A8                     780                  BRA         RETURN_SIX
0000175E                           781  
0000175E                           782  
0000175E  4EB9 000019F2            783  SIX0111         JSR         INVALID_OPCODE
00001764  60A0                     784                  BRA         RETURN_SIX
00001766                           785  
00001766                           786  
00001766  14FC 0042                787  SIX1000         MOVE.B      #'B', (A2)+
0000176A  14FC 0056                788                  MOVE.B      #'V', (A2)+
0000176E  14FC 0043                789                  MOVE.B      #'C', (A2)+
00001772  14FC 0009                790                  MOVE.B      #TAB, (A2)+
00001776                           791                  ;JSR        ISBRA
00001776  608E                     792                  BRA         RETURN_SIX
00001778                           793                  
00001778                           794  
00001778  4EB9 000019F2            795  SIX1001         JSR         INVALID_OPCODE
0000177E  6086                     796                  BRA         RETURN_SIX
00001780                           797  
00001780                           798  
00001780  4EB9 000019F2            799  SIX1010         JSR         INVALID_OPCODE
00001786  6000 FF7E                800                  BRA         RETURN_SIX
0000178A                           801  
0000178A                           802  
0000178A  4EB9 000019F2            803  SIX1011         JSR         INVALID_OPCODE
00001790  6000 FF74                804                  BRA         RETURN_SIX
00001794                           805  
00001794                           806  
00001794  14FC 0042                807  SIX1100         MOVE.B      #'B', (A2)+
00001798  14FC 0047                808                  MOVE.B      #'G', (A2)+
0000179C  14FC 0045                809                  MOVE.B      #'E', (A2)+
000017A0  14FC 0009                810                  MOVE.B      #TAB, (A2)+
000017A4                           811                  ;JSR        ISBRA
000017A4  6000 FF60                812                  BRA         RETURN_SIX
000017A8                           813  
000017A8                           814  
000017A8  14FC 0042                815  SIX1101         MOVE.B      #'B', (A2)+
000017AC  14FC 004C                816                  MOVE.B      #'L', (A2)+
000017B0  14FC 0054                817                  MOVE.B      #'T', (A2)+
000017B4  14FC 0009                818                  MOVE.B      #TAB, (A2)+
000017B8                           819                  ;JSR        ISBRA
000017B8                           820  
000017B8                           821  
000017B8  4EB9 000019F2            822  SIX1110         JSR         INVALID_OPCODE
000017BE  6000 FF46                823                  BRA         RETURN_SIX
000017C2                           824  
000017C2                           825  
000017C2  4EB9 000019F2            826  SIX1111         JSR         INVALID_OPCODE
000017C8  6000 FF3C                827                  BRA         RETURN_SIX
000017CC                           828  
000017CC                           829  
000017CC                           830  *----------------------------------------------------------------------------------------------------
000017CC                           831  * TABLEELEVEN: THIS IS FUNCTION FOR DETERMINING THE OPMODE OF THE INSTRUCTION
000017CC                           832  *----------------------------------------------------------------------------------------------------
000017CC  4EF9 000017FE            833  TABLEELEVEN     JMP         ELEVEN000
000017D2  4EF9 00001818            834                  JMP         ELEVEN001
000017D8  4EF9 00001832            835                  JMP         ELEVEN010
000017DE  4EF9 0000184C            836                  JMP         ELEVEN011
000017E4  4EF9 00001854            837                  JMP         ELEVEN100
000017EA  4EF9 0000186E            838                  JMP         ELEVEN101
000017F0  4EF9 0000188A            839                  JMP         ELEVEN110
000017F6  4EF9 000018A6            840                  JMP         ELEVEN111
000017FC  4E75                     841  RETURN_ELEVEN   RTS
000017FE                           842                  
000017FE  14FC 0043                843  ELEVEN000       MOVE.B      #'C', (A2)+
00001802  14FC 004D                844                  MOVE.B      #'M', (A2)+
00001806  14FC 0050                845                  MOVE.B      #'P', (A2)+
0000180A  14FC 002E                846                  MOVE.B      #'.', (A2)+
0000180E  14FC 0042                847                  MOVE.B      #'B', (A2)+
00001812  14FC 0009                848                  MOVE.B      #TAB, (A2)+
00001816                           849                  ;JSR            ISCMP
00001816  60E4                     850                  BRA         RETURN_ELEVEN
00001818                           851                  
00001818  14FC 0043                852  ELEVEN001       MOVE.B      #'C', (A2)+
0000181C  14FC 004D                853                  MOVE.B      #'M', (A2)+
00001820  14FC 0050                854                  MOVE.B      #'P', (A2)+
00001824  14FC 002E                855                  MOVE.B      #'.', (A2)+
00001828  14FC 0057                856                  MOVE.B      #'W', (A2)+
0000182C  14FC 0009                857                  MOVE.B      #TAB, (A2)+
00001830                           858                  ;JSR            ISCMP
00001830  60CA                     859                  BRA         RETURN_ELEVEN
00001832                           860                  
00001832  14FC 0043                861  ELEVEN010       MOVE.B      #'C', (A2)+
00001836  14FC 004D                862                  MOVE.B      #'M', (A2)+
0000183A  14FC 0050                863                  MOVE.B      #'P', (A2)+
0000183E  14FC 002E                864                  MOVE.B      #'.', (A2)+
00001842  14FC 0042                865                  MOVE.B      #'B', (A2)+
00001846  14FC 0009                866                  MOVE.B      #TAB, (A2)+
0000184A                           867              ;   JSR         ISCMP
0000184A  60B0                     868                  BRA         RETURN_ELEVEN
0000184C                           869                  
0000184C  4EB9 000019F2            870  ELEVEN011       JSR         INVALID_OPCODE
00001852  60A8                     871                  BRA         RETURN_ELEVEN
00001854                           872  
00001854  14FC 0045                873  ELEVEN100       MOVE.B      #'E', (A2)+
00001858  14FC 004F                874                  MOVE.B      #'O', (A2)+
0000185C  14FC 0052                875                  MOVE.B      #'R', (A2)+
00001860  14FC 002E                876                  MOVE.B      #'.', (A2)+
00001864  14FC 0042                877                  MOVE.B      #'B', (A2)+
00001868  14FC 0009                878                  MOVE.B      #TAB, (A2)+
0000186C                           879                  ;JSR            ISEOR
0000186C  608E                     880                  BRA         RETURN_ELEVEN
0000186E                           881                  
0000186E  14FC 0045                882  ELEVEN101       MOVE.B      #'E', (A2)+
00001872  14FC 004F                883                  MOVE.B      #'O', (A2)+
00001876  14FC 0052                884                  MOVE.B      #'R', (A2)+
0000187A  14FC 002E                885                  MOVE.B      #'.', (A2)+
0000187E  14FC 0057                886                  MOVE.B      #'W', (A2)+
00001882  14FC 0009                887                  MOVE.B      #TAB, (A2)+
00001886                           888                  ;JSR            ISEOR
00001886  6000 FF74                889                  BRA         RETURN_ELEVEN
0000188A                           890                  
0000188A  14FC 0045                891  ELEVEN110       MOVE.B      #'E', (A2)+
0000188E  14FC 004F                892                  MOVE.B      #'O', (A2)+
00001892  14FC 0052                893                  MOVE.B      #'R', (A2)+
00001896  14FC 002E                894                  MOVE.B      #'.', (A2)+
0000189A  14FC 004C                895                  MOVE.B      #'L', (A2)+
0000189E  14FC 0009                896                  MOVE.B      #TAB, (A2)+
000018A2                           897                  ;JSR            ISEOR
000018A2  6000 FF58                898                  BRA         RETURN_ELEVEN
000018A6                           899                  
000018A6  4EB9 000019F2            900  ELEVEN111       JSR         INVALID_OPCODE
000018AC  6000 FF4E                901                  BRA         RETURN_ELEVEN
000018B0                           902  
000018B0                           903  *----------------------------------------------------------------------------------------------------
000018B0                           904  * TABLETHIRTEEN: THIS IS FUNCTION FOR DETERMINING THE OPMODE OF THE INSTRUCTION
000018B0                           905  *----------------------------------------------------------------------------------------------------X
000018B0  4EF9 000018E2            906  TABLETHIRTEEN  JMP         THIRTEEN000
000018B6  4EF9 000018EC            907                  JMP         THIRTEEN001
000018BC  4EF9 000018F6            908                  JMP         THIRTEEN010
000018C2  4EF9 00001900            909                  JMP         THIRTEEN011
000018C8  4EF9 0000190E            910                  JMP         THIRTEEN100
000018CE  4EF9 00001918            911                  JMP         THIRTEEN101
000018D4  4EF9 00001922            912                  JMP         THIRTEEN110
000018DA  4EF9 0000192C            913                  JMP         THIRTEEN111
000018E0  4E75                     914  RETURN_THIRTEEN RTS
000018E2                           915  
000018E2                           916  
000018E2  14FC 002E                917  THIRTEEN000     MOVE.B      #'.', (A2)+
000018E6  14FC 0042                918                  MOVE.B      #'B', (A2)+
000018EA                           919                  ;JSR         ISADD
000018EA  60F4                     920                  BRA         RETURN_THIRTEEN
000018EC                           921  
000018EC  14FC 002E                922  THIRTEEN001     MOVE.B      #'.', (A2)+
000018F0  14FC 0057                923                  MOVE.B      #'W', (A2)+
000018F4                           924                  ;JSR         ISADD
000018F4  60EA                     925                  BRA         RETURN_THIRTEEN
000018F6                           926  
000018F6  14FC 002E                927  THIRTEEN010     MOVE.B      #'.', (A2)+
000018FA  14FC 004C                928                  MOVE.B      #'L', (A2)+
000018FE                           929                  ;JSR         ISADD
000018FE  60E0                     930                  BRA         RETURN_THIRTEEN
00001900                           931  
00001900  14FC 0041                932  THIRTEEN011     MOVE.B      #'A', (A2)+
00001904  14FC 002E                933                  MOVE.B      #'.', (A2)+
00001908  14FC 0057                934                  MOVE.B      #'W', (A2)+
0000190C                           935                  ;JSR         ISADDA
0000190C  60D2                     936                  BRA         RETURN_THIRTEEN
0000190E                           937  
0000190E  14FC 002E                938  THIRTEEN100     MOVE.B      #'.', (A2)+
00001912  14FC 0042                939                  MOVE.B      #'B', (A2)+
00001916                           940                  ;JSR         ISADD
00001916  60C8                     941                  BRA         RETURN_THIRTEEN
00001918                           942  
00001918  14FC 002E                943  THIRTEEN101     MOVE.B      #'.', (A2)+
0000191C  14FC 0057                944                  MOVE.B      #'W', (A2)+
00001920                           945                  ;JSR         ISADD
00001920  60BE                     946                  BRA         RETURN_THIRTEEN
00001922                           947  
00001922  14FC 002E                948  THIRTEEN110     MOVE.B      #'.', (A2)+
00001926  14FC 004C                949                  MOVE.B      #'L', (A2)+
0000192A                           950                  ;JSR         ISADD
0000192A  60B4                     951                  BRA         RETURN_THIRTEEN
0000192C                           952  
0000192C  14FC 0041                953  THIRTEEN111     MOVE.B      #'A', (A2)+
00001930  14FC 002E                954                  MOVE.B      #'.', (A2)+
00001934  14FC 004C                955                  MOVE.B      #'L', (A2)+
00001938                           956                  ;JSR         ISADDA
00001938  60A6                     957                  BRA         RETURN_THIRTEEN
0000193A                           958  
0000193A                           959  *----------------------------------------------------------------------------------------------------
0000193A                           960  * GET_OPMODE: THIS IS FUNCTION FOR DETERMINING THE OPMODE OF THE INSTRUCTION
0000193A                           961  *----------------------------------------------------------------------------------------------------
0000193A  3602                     962  GET_OPMODE      MOVE.W      D2, D3          ;MAKE A COPY OF INSTRUCTION TO D3
0000193C  EF4B                     963                  LSL         #7, D3          ;SHIFT TO THE LEFT 7 BITS
0000193E  E84B                     964                  LSR         #4, D3          ;SHIFT TO THE RIGHT 4 BITS
00001940  EE4B                     965                  LSR         #7, D3          ;SHIFT TO THE RIGHT 7 BITS
00001942  C6FC 0006                966                  MULU        #6, D3
00001946                           967                  
00001946  47F9 00001952            968                  LEA         TABLEOPMODE, A3
0000194C  4EB3 3000                969                  JSR         0(A3, D3)
00001950  4E75                     970                  RTS
00001952                           971    
00001952  4EF9 00001984            972  TABLEOPMODE     JMP         MODE000
00001958  4EF9 0000198A            973                  JMP         MODE001
0000195E  4EF9 00001990            974                  JMP         MODE010
00001964  4EF9 00001996            975                  JMP         MODE011
0000196A  4EF9 00001998            976                  JMP         MODE100
00001970  4EF9 0000199E            977                  JMP         MODE101
00001976  4EF9 000019A4            978                  JMP         MODE110
0000197C  4EF9 000019AA            979                  JMP         MODE111
00001982  4E75                     980  RETURN_OPMODE   RTS
00001984                           981                  
00001984  14FC 0042                982  MODE000         MOVE.B      #'B', (A2)+
00001988  60F8                     983                  BRA         RETURN_OPMODE
0000198A                           984                  
0000198A  14FC 0057                985  MODE001         MOVE.B      #'W', (A2)+
0000198E  60F2                     986                  BRA         RETURN_OPMODE
00001990                           987                  
00001990  14FC 004C                988  MODE010         MOVE.B      #'L', (A2)+
00001994  60EC                     989                  BRA         RETURN_OPMODE
00001996                           990  
00001996  60EA                     991  MODE011         BRA         RETURN_OPMODE
00001998                           992  
00001998  14FC 0042                993  MODE100         MOVE.B      #'B', (A2)+
0000199C  60E4                     994                  BRA         RETURN_OPMODE
0000199E                           995  
0000199E  14FC 0057                996  MODE101         MOVE.B      #'W', (A2)+
000019A2  60DE                     997                  BRA         RETURN_OPMODE
000019A4                           998                  
000019A4  14FC 004C                999  MODE110         MOVE.B      #'L', (A2)+
000019A8  60D8                    1000                  BRA         RETURN_OPMODE
000019AA                          1001                  
000019AA  60D6                    1002  MODE111         BRA         RETURN_OPMODE
000019AC                          1003                  
000019AC                          1004  *----------------------------------------------------------------------------------------------------
000019AC                          1005  * GET_SIZE: THIS IS A FUNCTION FOR DETERMINING THE SIZE OF THE INSTRUCTION
000019AC                          1006  *----------------------------------------------------------------------------------------------------
000019AC  3602                    1007  GET_SIZE        MOVE.W      D2, D3          ;MAKE A COPY OF ORIGINAL INSTRUCTION TO D3
000019AE  E14B                    1008                  LSL         #8, D3          ;SHIFT TO THE LEFT 8 BITS
000019B0  EC4B                    1009                  LSR         #6, D3          ;SHIFT TO THE RIGHT 6 BITS
000019B2  E04B                    1010                  LSR         #8, D3          ;SHIFT TO THE RIGHT 8 BITS
000019B4  C6FC 0006               1011                  MULU        #6, D3
000019B8                          1012                  
000019B8  47F9 000019C4           1013                  LEA         TABLESIZE, A3
000019BE  4EB3 3000               1014                  JSR         0(A3, D3)
000019C2  4E75                    1015                  RTS
000019C4                          1016  
000019C4  4EF9 000019DE           1017  TABLESIZE       JMP         SIZE00
000019CA  4EF9 000019E4           1018                  JMP         SIZE01
000019D0  4EF9 000019EA           1019                  JMP         SIZE10
000019D6  4EF9 000019F0           1020                  JMP         SIZE11
000019DC  4E75                    1021  RETURN_SIZE     RTS
000019DE                          1022                  
000019DE  14FC 0042               1023  SIZE00          MOVE.B      #'B', (A2)+
000019E2  60F8                    1024                  BRA         RETURN_SIZE
000019E4                          1025                                  
000019E4  14FC 0057               1026  SIZE01          MOVE.B      #'W', (A2)+
000019E8  60F2                    1027                  BRA         RETURN_SIZE
000019EA                          1028                  
000019EA  14FC 004C               1029  SIZE10          MOVE.B      #'L', (A2)+
000019EE  60EC                    1030                  BRA         RETURN_SIZE
000019F0                          1031                  
000019F0  60EA                    1032  SIZE11          BRA         RETURN_SIZE
000019F2                          1033  
000019F2                          1034  *----------------------------------------------------------------------------------------------------
000019F2                          1035  * GET_DIRECTION: THIS IS A FUNCTION FOR DETERMINING THE DIRECTION OF THE INSTRUCTION (LEFT OR RIGHT)
000019F2                          1036  *----------------------------------------------------------------------------------------------------
000019F2                          1037  
000019F2                          1038  
000019F2                          1039  *----------------------------------------------------------------------------------------------------
000019F2                          1040  INVALID_OPCODE:
000019F2                          1041  *----------------------------------------------------------------------------------------------------
000019F2  14FC 0049               1042  INVALID_OPCODE  MOVE.B      #'I', (A2)+
000019F6  14FC 004E               1043                  MOVE.B      #'N', (A2)+
000019FA  14FC 0056               1044                  MOVE.B      #'V', (A2)+
000019FE  14FC 0041               1045                  MOVE.B      #'A', (A2)+
00001A02  14FC 004C               1046                  MOVE.B      #'L', (A2)+
00001A06  14FC 0049               1047                  MOVE.B      #'I', (A2)+
00001A0A  14FC 0044               1048                  MOVE.B      #'D', (A2)+
00001A0E  14FC 0020               1049                  MOVE.B      #' ', (A2)+
00001A12  14FC 004F               1050                  MOVE.B      #'O', (A2)+
00001A16  14FC 0050               1051                  MOVE.B      #'P', (A2)+
00001A1A  14FC 0043               1052                  MOVE.B      #'C', (A2)+
00001A1E  14FC 004F               1053                  MOVE.B      #'O', (A2)+
00001A22  14FC 0044               1054                  MOVE.B      #'D', (A2)+
00001A26  14FC 0045               1055                  MOVE.B      #'E', (A2)+
00001A2A  4E75                    1056                  RTS
00001A2C                          1057  
00001A2C                          1058              
00001A2C                          1059  *-----------------------------------------------------------
00001A2C                          1060  * Title      :EA
00001A2C                          1061  * Written by :Nicolas Michael
00001A2C                          1062  * Date       :5/19/2015
00001A2C                          1063  * Description:Completed EA codes for testing
00001A2C                          1064  *-----------------------------------------------------------
00001A2C                          1065                  
00001A2C                          1066  *---------------------------------------------------------------------------------------------------------
00001A2C                          1067  *IS MULS           TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN MULS COMMAND. APPENDS 
00001A2C                          1068  *                  ADDRESSING MODES TO END OF CURRENT COMMAND STRING
00001A2C                          1069  *
00001A2C                          1070  *PRE CONDITIONS -  A6 POINTS TO START OF MOVE COMMAND. A2 POINTS TO LOCATION AFTER MOVE STRING AND TAB
00001A2C                          1071  *
00001A2C                          1072  *POST CONDITIONS - A6 POINTS TO NEXT COMMAND TO BE DISASSEMBLED. A2 POINTS TO NEXT LOCATION TO BE APPENDED,
00001A2C                          1073  *                  DELIMETER SHOULD BE ADDED TO THIS LOCATION IMMEDIATELY. ALL OTHER ADDRESS AND DATA 
00001A2C                          1074  *                  REGISTERS ARE PRESERVED
00001A2C                          1075  *---------------------------------------------------------------------------------------------------------   
00001A2C  48F8 3BFF 0400          1076  ISMULS      MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001A32  4EB9 00002304           1077              JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001A38  301E                    1078              MOVE.W      (A6)+, D0
00001A3A  4EB9 00001C9C           1079              JSR         GETMOVEREG                                               
00001A40  4EB9 0000216E           1080              JSR         ERRORCHECK                       *CHECK FOR ERRORS, $BEEF AT $456 IF ERRORS EXISTS
00001A46  163C 0000               1081              MOVE.B      #0, D3
00001A4A  4EB9 000021CE           1082              JSR         SWAP
00001A50  4EB9 0000216E           1083              JSR         ERRORCHECK
00001A56  0C78 BEEF 0456          1084              CMP.W       #$BEEF, $456                     *IF $BEEF, APPEND BAD DATA STRING TO A2
00001A5C  6700 002E               1085              BEQ         BADMULDATA
00001A60  4EB9 000021CE           1086              JSR         SWAP
00001A66  4EB9 000021D4           1087              JSR         APPENDEA 
00001A6C  4EB9 000021CE           1088              JSR         SWAP                             *ELSE APPEND SRC AE
00001A72  14FC 002C               1089              MOVE.B      #',', (A2)+
00001A76  14FC 0020               1090              MOVE.B      #' ', (A2)+
00001A7A  4EB9 000021D4           1091              JSR         APPENDEA                         *APPEND DESTINATION EA
00001A80  4CF8 3BFF 0400          1092  RTN_BADMUL  MOVEM.L     $400, D0-D7/A0/A1/A3-A5          *RESTORE JEENS REGISTERS
00001A86  7C00                    1093              MOVE.L      #0, D6
00001A88  7E00                    1094              MOVE.L      #0, D7
00001A8A  4E75                    1095              RTS    
00001A8C                          1096  
00001A8C                          1097  *---------------------------------------------------------------------------------------------------------
00001A8C                          1098  *MOVE BAD DATA - BAD DATA FOUND, CLEANUP AND RETURN
00001A8C                          1099  *---------------------------------------------------------------------------------------------------------      
00001A8C  4EB9 000023E4           1100  BADMULDATA  JSR         BADDATA
00001A92  4EF8 1A80               1101              JMP         RTN_BADMUL
00001A96                          1102                  
00001A96                          1103  *---------------------------------------------------------------------------------------------------------
00001A96                          1104  *IS SUBQ           TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN SUBQ COMMAND. APPENDS 
00001A96                          1105  *                  ADDRESSING MODES TO END OF CURRENT COMMAND STRING
00001A96                          1106  *
00001A96                          1107  *PRE CONDITIONS -  A6 POINTS TO START OF MOVE COMMAND. A2 POINTS TO LOCATION AFTER MOVE STRING AND TAB
00001A96                          1108  *
00001A96                          1109  *POST CONDITIONS - A6 POINTS TO NEXT COMMAND TO BE DISASSEMBLED. A2 POINTS TO NEXT LOCATION TO BE APPENDED,
00001A96                          1110  *                  DELIMETER SHOULD BE ADDED TO THIS LOCATION IMMEDIATELY. ALL OTHER ADDRESS AND DATA 
00001A96                          1111  *                  REGISTERS ARE PRESERVED
00001A96                          1112  *---------------------------------------------------------------------------------------------------------   
00001A96  48F8 3BFF 0400          1113  ISSUBQ      MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001A9C  4EB9 00002304           1114              JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001AA2  301E                    1115              MOVE.W      (A6)+, D0
00001AA4  4EB9 00001C9C           1116              JSR         GETMOVEREG                                               
00001AAA  4EB9 0000216E           1117              JSR         ERRORCHECK                       *CHECK FOR ERRORS, $BEEF AT $456 IF ERRORS EXISTS
00001AB0  0C78 BEEF 0456          1118              CMP.W       #$BEEF, $456                     *IF $BEEF, APPEND BAD DATA STRING TO A2
00001AB6  6700 0032               1119              BEQ         BADQDATA
00001ABA  4EB9 000021CE           1120              JSR         SWAP
00001AC0  14FC 0023               1121              MOVE.B      #'#', (A2)+
00001AC4  4EB9 00002378           1122              JSR         APPENDDISPLACE 
00001ACA  4EB9 000021CE           1123              JSR         SWAP                             *ELSE APPEND SRC AE
00001AD0  14FC 002C               1124              MOVE.B      #',', (A2)+
00001AD4  14FC 0020               1125              MOVE.B      #' ', (A2)+
00001AD8  4EB9 000021D4           1126              JSR         APPENDEA                         *APPEND DESTINATION EA
00001ADE  4CF8 3BFF 0400          1127  RTN_BADQ    MOVEM.L     $400, D0-D7/A0/A1/A3-A5          *RESTORE JEENS REGISTERS
00001AE4  7C00                    1128              MOVE.L      #0, D6
00001AE6  7E00                    1129              MOVE.L      #0, D7
00001AE8  4E75                    1130              RTS    
00001AEA                          1131  
00001AEA                          1132  *---------------------------------------------------------------------------------------------------------
00001AEA                          1133  *MOVE BAD DATA - BAD DATA FOUND, CLEANUP AND RETURN
00001AEA                          1134  *---------------------------------------------------------------------------------------------------------      
00001AEA  4EB9 000023E4           1135  BADQDATA    JSR         BADDATA
00001AF0  4EF8 1ADE               1136              JMP         RTN_BADQ 
00001AF4                          1137  
00001AF4                          1138  *---------------------------------------------------------------------------------------------------------
00001AF4                          1139  *IS ADDA           TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN ADDA COMMAND. APPENDS 
00001AF4                          1140  *                  ADDRESSING MODES TO END OF CURRENT COMMAND STRING
00001AF4                          1141  *
00001AF4                          1142  *PRE CONDITIONS -  A6 POINTS TO START OF MOVE COMMAND. A2 POINTS TO LOCATION AFTER MOVE STRING AND TAB
00001AF4                          1143  *
00001AF4                          1144  *POST CONDITIONS - A6 POINTS TO NEXT COMMAND TO BE DISASSEMBLED. A2 POINTS TO NEXT LOCATION TO BE APPENDED,
00001AF4                          1145  *                  DELIMETER SHOULD BE ADDED TO THIS LOCATION IMMEDIATELY. ALL OTHER ADDRESS AND DATA 
00001AF4                          1146  *                  REGISTERS ARE PRESERVED
00001AF4                          1147  *---------------------------------------------------------------------------------------------------------   
00001AF4  7C01                    1148  ISADDAL     MOVE.L      #1, D6                           *INDICATES LONG DATA
00001AF6  4EB9 00001AFE           1149              JSR         ISADDA                                                                             
00001AFC  4E75                    1150              RTS   
00001AFE  48F8 3BFF 0400          1151  ISADDA      MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001B04  4EB9 00002304           1152              JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001B0A  301E                    1153              MOVE.W      (A6)+, D0
00001B0C  4EB9 00001C9C           1154              JSR         GETMOVEREG
00001B12  163C 0001               1155              MOVE.B      #1, D3                           *SET DESTINATION TO ADDRESS REGISTER                                               
00001B16  4EB9 0000216E           1156              JSR         ERRORCHECK                       *CHECK FOR ERRORS, $BEEF AT $456 IF ERRORS EXISTS
00001B1C  4EB9 000021CE           1157              JSR         SWAP
00001B22  4EB9 0000216E           1158              JSR         ERRORCHECK
00001B28  4EB9 000021CE           1159              JSR         SWAP
00001B2E  0C78 BEEF 0456          1160              CMP.W       #$BEEF, $456                     *IF $BEEF, APPEND BAD DATA STRING TO A2
00001B34  6700 0028               1161              BEQ         ADDABADDATA
00001B38  4EB9 000021D4           1162              JSR         APPENDEA 
00001B3E  4EB9 000021CE           1163              JSR         SWAP                             *ELSE APPEND SRC AE
00001B44  14FC 002C               1164              MOVE.B      #',', (A2)+
00001B48  14FC 0020               1165              MOVE.B      #' ', (A2)+
00001B4C  4EB9 000021D4           1166              JSR         APPENDEA                         *APPEND DESTINATION EA
00001B52  4CF8 3BFF 0400          1167  RTN_BADA    MOVEM.L     $400, D0-D7/A0/A1/A3-A5          *RESTORE JEENS REGISTERS
00001B58  7C00                    1168              MOVE.L      #0, D6
00001B5A  7E00                    1169              MOVE.L      #0, D7
00001B5C  4E75                    1170              RTS    
00001B5E                          1171  
00001B5E                          1172  *---------------------------------------------------------------------------------------------------------
00001B5E                          1173  *MOVE BAD DATA - BAD DATA FOUND, CLEANUP AND RETURN
00001B5E                          1174  *---------------------------------------------------------------------------------------------------------      
00001B5E  4EB9 000023E4           1175  ADDABADDATA JSR         BADDATA
00001B64  4EF8 1B52               1176              JMP         RTN_BADA     
00001B68                          1177                             
00001B68                          1178  *---------------------------------------------------------------------------------------------------------
00001B68                          1179  *IS BCLR           TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN BCLR COMMAND. CAN BE 
00001B68                          1180  *                  CALLED REGARDLESS OF SIZE CODE. EA WILL BE THE SAME FOR BOTH BYTE AND LONG MODES
00001B68                          1181  *
00001B68                          1182  *PRE CONDITIONS -  A6 POINTS TO START OF MOVE COMMAND. A2 POINTS TO LOCATION AFTER MOVE STRING AND TAB
00001B68                          1183  *
00001B68                          1184  *POST CONDITIONS - A6 POINTS TO NEXT COMMAND TO BE DISASSEMBLED. A2 POINTS TO NEXT LOCATION TO BE APPENDED,
00001B68                          1185  *                  DELIMETER SHOULD BE ADDED TO THIS LOCATION IMMEDIATELY. ALL OTHER ADDRESS AND DATA 
00001B68                          1186  *                  REGISTERS ARE PRESERVED
00001B68                          1187  *---------------------------------------------------------------------------------------------------------   
00001B68  48F8 3BFF 0400          1188  ISBCLR      MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001B6E  4EB9 00002304           1189              JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001B74  301E                    1190              MOVE.W      (A6)+, D0
00001B76  4EB9 00001C9C           1191              JSR         GETMOVEREG                                               
00001B7C  4EB9 000021CE           1192              JSR         SWAP
00001B82  0C01 0006               1193              CMPI.B      #6, D1
00001B86  6600 004E               1194              BNE         IMSOURCE
00001B8A  123C 0000               1195              MOVE.B      #0, D1
00001B8E  4EB9 0000216E           1196  RTN_IMSRC   JSR         ERRORCHECK
00001B94  4EB9 000021CE           1197              JSR         SWAP
00001B9A  4EB9 0000216E           1198              JSR         ERRORCHECK
00001BA0  4EB9 000021CE           1199              JSR         SWAP
00001BA6  0C78 BEEF 0456          1200              CMP.W       #$BEEF, $456                     *IF $BEEF, APPEND BAD DATA STRING TO A2
00001BAC  6700 0034               1201              BEQ         BCLRBADDATA
00001BB0  4EB9 000021D4           1202              JSR         APPENDEA 
00001BB6  4EB9 000021CE           1203              JSR         SWAP                             *ELSE APPEND SRC AE
00001BBC  14FC 002C               1204              MOVE.B      #',', (A2)+
00001BC0  14FC 0020               1205              MOVE.B      #' ', (A2)+
00001BC4  4EB9 000021D4           1206              JSR         APPENDEA                         *APPEND DESTINATION EA
00001BCA  4CF8 3BFF 0400          1207  RTN_BCLRBAD MOVEM.L     $400, D0-D7/A0/A1/A3-A5          *RESTORE JEENS REGISTERS
00001BD0  7C00                    1208              MOVE.L      #0, D6
00001BD2  7E00                    1209              MOVE.L      #0, D7
00001BD4  4E75                    1210              RTS 
00001BD6                          1211              
00001BD6  123C 0007               1212  IMSOURCE    MOVE.B      #7, D1
00001BDA  103C 0004               1213              MOVE.B      #4, D0
00001BDE  4EF8 1B8E               1214              JMP         RTN_IMSRC
00001BE2                          1215  
00001BE2                          1216  *---------------------------------------------------------------------------------------------------------
00001BE2                          1217  *MOVE BAD DATA - BAD DATA FOUND, CLEANUP AND RETURN
00001BE2                          1218  *---------------------------------------------------------------------------------------------------------      
00001BE2  4EB9 000023E4           1219  BCLRBADDATA JSR         BADDATA
00001BE8  4EF8 1BCA               1220              JMP         RTN_BCLRBAD
00001BEC                          1221            
00001BEC                          1222  
00001BEC                          1223  *---------------------------------------------------------------------------------------------------------
00001BEC                          1224  *IS BRA            TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN BRA OR BRA FAMILY COMMAND. 
00001BEC                          1225  *                  APPENDS ADDRESSING OF NEXT INSTRUCTION TO BE EXECUTED TO A2
00001BEC                          1226  *
00001BEC                          1227  *PRE CONDITIONS -  A6 POINTS TO START OF MOVE COMMAND. A2 POINTS TO LOCATION AFTER MOVE STRING AND TAB
00001BEC                          1228  *
00001BEC                          1229  *POST CONDITIONS - A6 POINTS TO NEXT COMMAND TO BE DISASSEMBLED. A2 POINTS TO NEXT LOCATION TO BE APPENDED,
00001BEC                          1230  *                  DELIMETER SHOULD BE ADDED TO THIS LOCATION IMMEDIATELY. ALL OTHER ADDRESS AND DATA 
00001BEC                          1231  *                  REGISTERS ARE PRESERVED
00001BEC                          1232  *---------------------------------------------------------------------------------------------------------
00001BEC  48F8 3BFF 0400          1233  ISBRA           MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001BF2  4EB9 00002304           1234                  JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001BF8  220E                    1235                  MOVE.L      A6, D1                           *PC ADDRESS
00001BFA  5441                    1236                  ADDQ        #2, D1                           *ADD 2 TO PC ADDRESS
00001BFC  301E                    1237                  MOVE.W      (A6)+, D0
00001BFE  4EB9 00001C20           1238                  JSR         GETDISPLACEMENT                                               
00001C04  0C00 0000               1239                  CMPI.B      #0, D0
00001C08  6700 001C               1240                  BEQ         BITDISPLACE                      *IF SIXTEEN BIT DISPLACEMENT GET NEXT WORD
00001C0C  D280                    1241  RTN_16BIT       ADD.L       D0, D1
00001C0E  4EB9 00002378           1242                  JSR         APPENDDISPLACE                   *APPEND DESTINATION EA
00001C14  4CF8 3BFF 0400          1243                  MOVEM.L     $400, D0-D7/A0/A1/A3-A5          *RESTORE JEENS REGISTERS
00001C1A  7C00                    1244                  MOVE.L      #0, D6
00001C1C  7E00                    1245                  MOVE.L      #0, D7
00001C1E  4E75                    1246                  RTS
00001C20                          1247  
00001C20                          1248  *---------------------------------------------------------------------------------------------------------
00001C20                          1249  *GET DISPLACEMENT - SHIFTS CURRENT WORD TO EXTRACT 8 BIT DISPLACEMENT VALUE, CHECK FOR 00 AFTERWARDS
00001C20                          1250  *---------------------------------------------------------------------------------------------------------
00001C20  E148                    1251  GETDISPLACEMENT LSL.W   #8, D0
00001C22  E048                    1252                  LSR.W   #8, D0
00001C24  4E75                    1253                  RTS
00001C26                          1254   
00001C26                          1255  *---------------------------------------------------------------------------------------------------------
00001C26                          1256  *BIT DISPLACEMENT - 8 BIT DISPLACEMENT MUST BE 0, GRAB NEXT WORD TO EXTRACT 16 BIT DISPLACEMENT, HEHE.
00001C26                          1257  *---------------------------------------------------------------------------------------------------------               
00001C26  301E                    1258  BITDISPLACE     MOVE.W      (A6)+, D0
00001C28  4EF8 1C0C               1259                  JMP         RTN_16BIT
00001C2C                          1260  
00001C2C                          1261  *---------------------------------------------------------------------------------------------------------
00001C2C                          1262  *IS MOVEB/W/L      TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN MOVE COMMAND. APPENDS 
00001C2C                          1263  *                  ADDRESSING MODES TO END OF CURRENT COMMAND STRING
00001C2C                          1264  *
00001C2C                          1265  *PRE CONDITIONS -  A6 POINTS TO START OF MOVE COMMAND. A2 POINTS TO LOCATION AFTER MOVE STRING AND TAB
00001C2C                          1266  *
00001C2C                          1267  *POST CONDITIONS - A6 POINTS TO NEXT COMMAND TO BE DISASSEMBLED. A2 POINTS TO NEXT LOCATION TO BE APPENDED,
00001C2C                          1268  *                  DELIMETER SHOULD BE ADDED TO THIS LOCATION IMMEDIATELY. ALL OTHER ADDRESS AND DATA 
00001C2C                          1269  *                  REGISTERS ARE PRESERVED
00001C2C                          1270  *---------------------------------------------------------------------------------------------------------   
00001C2C  7C01                    1271  ISMOVEL     MOVE.L      #1, D6                           *INDICATES LONG DATA
00001C2E  4EB9 00001C36           1272              JSR         ISMOVE                                                                             
00001C34  4E75                    1273              RTS  
00001C36  48F8 3BFF 0400          1274  ISMOVE      MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001C3C  4EB9 00002304           1275              JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001C42  301E                    1276              MOVE.W      (A6)+, D0
00001C44  4EB9 00001C9C           1277              JSR         GETMOVEREG                                               
00001C4A  4EB9 0000216E           1278              JSR         ERRORCHECK                       *CHECK FOR ERRORS, $BEEF AT $456 IF ERRORS EXISTS
00001C50  4EB9 000021CE           1279              JSR         SWAP
00001C56  4EB9 0000216E           1280              JSR         ERRORCHECK
00001C5C  4EB9 000021CE           1281              JSR         SWAP
00001C62  0C78 BEEF 0456          1282              CMP.W       #$BEEF, $456                     *IF $BEEF, APPEND BAD DATA STRING TO A2
00001C68  6700 0028               1283              BEQ         MOVEBADDATA
00001C6C  4EB9 000021D4           1284              JSR         APPENDEA 
00001C72  4EB9 000021CE           1285              JSR         SWAP                             *ELSE APPEND SRC AE
00001C78  14FC 002C               1286              MOVE.B      #',', (A2)+
00001C7C  14FC 0020               1287              MOVE.B      #' ', (A2)+
00001C80  4EB9 000021D4           1288              JSR         APPENDEA                         *APPEND DESTINATION EA
00001C86  4CF8 3BFF 0400          1289  RTN_BAD     MOVEM.L     $400, D0-D7/A0/A1/A3-A5          *RESTORE JEENS REGISTERS
00001C8C  7C00                    1290              MOVE.L      #0, D6
00001C8E  7E00                    1291              MOVE.L      #0, D7
00001C90  4E75                    1292              RTS 
00001C92                          1293  
00001C92                          1294  *---------------------------------------------------------------------------------------------------------
00001C92                          1295  *MOVE BAD DATA - BAD DATA FOUND, CLEANUP AND RETURN
00001C92                          1296  *---------------------------------------------------------------------------------------------------------      
00001C92  4EB9 000023E4           1297  MOVEBADDATA JSR         BADDATA
00001C98  4EF8 1C86               1298              JMP         RTN_BAD
00001C9C                          1299  
00001C9C                          1300  *---------------------------------------------------------------------------------------------------------
00001C9C                          1301  *GET MOVE REGISTERS - PARSES MOVE ADDRESSING REGISTERS AND MODES INTO D0, D1, D2 AND D3 TO BE CHECKED FOR ERROR
00001C9C                          1302  *---------------------------------------------------------------------------------------------------------            
00001C9C  3200                    1303  GETMOVEREG      MOVE.W  D0, D1
00001C9E  3400                    1304                  MOVE.W  D0, D2
00001CA0  3600                    1305                  MOVE.W  D0, D3
00001CA2  E148                    1306                  LSL.W   #8, D0
00001CA4  EB48                    1307                  LSL.W   #5, D0
00001CA6  E048                    1308                  LSR.W   #8, D0
00001CA8  EA48                    1309                  LSR.W   #5, D0
00001CAA  E149                    1310                  LSL.W   #8, D1
00001CAC  E549                    1311                  LSL.W   #2, D1
00001CAE  E049                    1312                  LSR.W   #8, D1
00001CB0  EA49                    1313                  LSR.W   #5, D1
00001CB2  E94A                    1314                  LSL.W   #4, D2
00001CB4  E04A                    1315                  LSR.W   #8, D2
00001CB6  EA4A                    1316                  LSR.W   #5, D2
00001CB8  EF4B                    1317                  LSL.W   #7, D3
00001CBA  E04B                    1318                  LSR.W   #8, D3
00001CBC  EA4B                    1319                  LSR.W   #5, D3
00001CBE  4E75                    1320                  RTS               
00001CC0                          1321                  
00001CC0                          1322  *---------------------------------------------------------------------------------------------------------
00001CC0                          1323  *ISMOVEMW/L        (IS MOVEM.L AND MOVEM.W)- TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A 
00001CC0                          1324  *                  KNOWN MOVEM COMMAND
00001CC0                          1325  *
00001CC0                          1326  *PRE CONDITIONS -  A6 POINTS TO START OF MOVEM COMMAND
00001CC0                          1327  *
00001CC0                          1328  *POST CONDITIONS - A2 POINTS TO NEXT AVAILABLE LOCATION TO ADD NEXT ASCII INSTRUCTION. DO NOT INCREMENT
00001CC0                          1329  *                  A2, ALREADY DONE! A6 POINTS TO START OF NEXT COMMAND OR AND OF FILE IF ALL COMMANDS HAVE
00001CC0                          1330  *                  BEEN DIASSEMBLED. DO NOT INC A6, ALREADY DONE. ASCII STRINGS HAVE BEEN ADDED TO (A2) IF
00001CC0                          1331  *                  NO ERRORS OCCURED. IF ADDRESSING MODES ARE USED THAT ARE NOT SUPPORTED, THE COMMAND 
00001CC0                          1332  *                  STRING WILL BE INCORRECT, TO BE FIXED! THE STATE OF ALL OTHER REGISTERS IS UNDETERMINED 
00001CC0                          1333  *                  AFTER EXECUTION.
00001CC0                          1334  *---------------------------------------------------------------------------------------------------------
00001CC0  48F8 3BFF 0400          1335  ISMOVEM       MOVEM.L       D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001CC6  48F8 3BFF 0400          1336  ISMOVEML      MOVEM.L       D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001CCC  4EB9 00002304           1337                JSR           CLRALLDREG                       *CLEAR REGISTERS FOR MOVEM
00001CD2  4EB9 00001E2C           1338                JSR           SETEAREGISTERS
00001CD8  4EB9 0000216E           1339                JSR           ERRORCHECK
00001CDE  0C78 BEEF 0456          1340                CMP.W         #$BEEF, $456                     *IF $BEEF, APPEND BAD DATA STRING TO A2
00001CE4  6700 002C               1341                BEQ           MMBADDATA 
00001CE8  4EB9 00001E28           1342                JSR           GETLISTMASK
00001CEE  0C04 0001               1343                CMPI.B        #1, D4
00001CF2  6700 004A               1344                BEQ           MMAPPEA1
00001CF6  4EB9 00001D1C           1345                JSR           MMAPPEA0
00001CFC  4CF8 3BFF 0400          1346  RTN_1DIR      MOVEM.L       $400, D0-D7/A0/A1/A3-A5          *RESTORE JEENS REGISTERS  
00001D02  7C00                    1347                MOVE.L        #0, D6
00001D04  7E00                    1348                MOVE.L        #0, D7   
Line 1349 ERROR: Symbol defined more than once
00001D06  4CF8 3BFF 0400          1349  RTN_1DIR      MOVEM.L       $400, D0-D7/A0/A1/A3-A5          *RESTORE JEENS REGISTERS     
00001D0C  7C00                    1350                MOVE.L        #0, D6
00001D0E  7E00                    1351                MOVE.L        #0, D7   
00001D10  4E75                    1352                RTS 
00001D12                          1353  
00001D12                          1354  *---------------------------------------------------------------------------------------------------------
00001D12                          1355  *MOVE BAD DATA - BAD DATA FOUND, CLEANUP AND RETURN
00001D12                          1356  *---------------------------------------------------------------------------------------------------------      
00001D12  4EB9 000023E4           1357  MMBADDATA   JSR         BADDATA
00001D18  4EF8 1CFC               1358              JMP         RTN_1DIR 
00001D1C                          1359  
00001D1C                          1360  *-----------------------------------------------------------------------------------------------------------
00001D1C                          1361  *MOVEM APPEND ADDRESS DIRECTION 0 (REG TO MEM) - APPENDS ADDRESSES ACCORDING TO DIRECTION REG TO MEM
00001D1C                          1362  *-----------------------------------------------------------------------------------------------------------
00001D1C  48B8 00FF 0500          1363  MMAPPEA0      MOVEM.W      D0-D7, $500                      *SAVE MY PRECIOUS REGISTERS
00001D22  4EB9 00001D56           1364                JSR          APPLISTRTM
00001D28  4CB8 00FF 0500          1365                MOVEM.W      $500, D0-D7
00001D2E  14FC 002C               1366                MOVE.B       #',', (A2)+
00001D32  14FC 0020               1367                MOVE.B       #' ', (A2)+
00001D36  4EB9 000021D4           1368                JSR          APPENDEA
00001D3C  4E75                    1369                RTS
00001D3E                          1370  
00001D3E                          1371  *-----------------------------------------------------------------------------------------------------------
00001D3E                          1372  *MOVEM APPEND ADDRESS DIRECTION 1 (MEM TO REG) - APPENDS ADDRESSES ACCORDING TO DIRECTION MEM TO REG
00001D3E                          1373  *-----------------------------------------------------------------------------------------------------------
00001D3E  4EB9 000021D4           1374  MMAPPEA1      JSR          APPENDEA
00001D44  14FC 002C               1375                MOVE.B       #',', (A2)+
00001D48  14FC 0020               1376                MOVE.B       #' ', (A2)+
00001D4C  4EB9 00001D56           1377                JSR          APPLISTRTM
00001D52  4EF8 1CFC               1378                JMP          RTN_1DIR     
00001D56                          1379  
00001D56                          1380  *-----------------------------------------------------------------------------------------------------------
00001D56                          1381  *APPEND LIST - APPENDS SOURCE LIST OF REGISTERS TO COMMAND STRING IN THE FORMAT AN/DN OR DN/AN IF ADDRESS 
00001D56                          1382  *              INDIRECT PRE DECREMENT IS USED FOR DESTINATION ADDRESSING MODE. DOES NOT USE DASH (-) SYMBOL. 
00001D56                          1383  *              IF THERE'S TIME, I WILL ADD.
00001D56                          1384  *-----------------------------------------------------------------------------------------------------------                
00001D56  0C01 0004               1385  APPLISTRTM      CMPI.B        #4, D1              *DIESTINATION IS ADDRESS INDIRECT PRE DECREMEMNT
00001D5A  6700 0070               1386                  BEQ           BACKWARDLIST
00001D5E  0C01 0002               1387                  CMPI.B        #2, D1              *DESTINATION IS ADDRESS INDIRECT
00001D62  6700 000C               1388                  BEQ           FORWARDLIST
00001D66  0C01 0007               1389                  CMPI.B        #7, D1              *DESTINATION IS  ABSOLUTE WORD OR LONG
00001D6A  6700 0004               1390                  BEQ           FORWARDLIST
00001D6E  4E75                    1391  RTN_LIST        RTS
00001D70                          1392  
00001D70                          1393  *-----------------------------------------------------------------------------------------------------------
00001D70                          1394  *FORWARD LIST - FOR LOOP USED TO APPEND REGISTER STRINGS FOR EXAMPLE "A7/A6/D3/D1/D0"
00001D70                          1395  *-----------------------------------------------------------------------------------------------------------
00001D70  323C 000F               1396  FORWARDLIST     MOVE.W  #0015, D1           *BIG UGLY FOR LOOP
00001D74  303C 0000               1397                  MOVE.W  #0000, D0
00001D78  343C 0000               1398                  MOVE.W  #0000, D2
00001D7C  E34B                    1399  FRWRDLOOP       LSL.W   #1, D3              *SHIFT FIELD MASK, CARRY WILL BE SET IF REGISTER SHOULD BE APPENDED
00001D7E  6500 000C               1400                  BCS     APPENDDORAF         *WAS THERE CARRY?
00001D82  5301                    1401  RTN_APPDF       SUBI.B  #1, D1              *DECREMENT 
00001D84  B200                    1402                  CMP.B   D0, D1              *IS GREATER THAN OR EQUAL? FOR(INT D0 = 15; D1 >= D0; D1--)
00001D86  6CF4                    1403                  BGE     FRWRDLOOP
00001D88  4EF8 1D6E               1404                  JMP     RTN_LIST 
00001D8C                          1405  
00001D8C                          1406  *-----------------------------------------------------------------------------------------------------------
00001D8C                          1407  *APPEND D OR A (FORWARD LOOP) - APPENDS STRING D OR A DEPENDING ON FOR LOOP COUNT
00001D8C                          1408  *-----------------------------------------------------------------------------------------------------------
00001D8C  0C01 0007               1409  APPENDDORAF     CMPI.B  #7, D1
00001D90  6E00 002A               1410                  BGT     APPAF
00001D94  14FC 0044               1411                  MOVE.B  #'D', (A2)+
00001D98  0602 0030               1412                  ADDI.B  #48, D2
00001D9C  D401                    1413                  ADD.B   D1, D2
00001D9E  14C2                    1414                  MOVE.B  D2, (A2)+
00001DA0  B67C 0000               1415  RTN_APPAF       CMP.W   #0, D3
00001DA4  6700 0008               1416                  BEQ     RTN_SLASHF
00001DA8  4EF9 00001DB4           1417                  JMP     APPENDSLASHF
00001DAE  4242                    1418  RTN_SLASHF      CLR     D2
00001DB0  4EF8 1D82               1419                  JMP     RTN_APPDF            *END BIG UGLY FOR LOOP
00001DB4                          1420  
00001DB4                          1421  *-----------------------------------------------------------------------------------------------------------
00001DB4                          1422  *APPEND SLASH (FORWARD LOOP) - APPENDS A SLASH (/) TO COMMAND STRING IS MORE REGISTERS ARE TO BE PRINTED
00001DB4                          1423  *-----------------------------------------------------------------------------------------------------------
00001DB4  14FC 002F               1424  APPENDSLASHF    MOVE.B  #$2F, (A2)+     *ADD SLASH = 2F IN HEX
00001DB8  4EF8 1DAE               1425                  JMP     RTN_SLASHF 
00001DBC                          1426                  
00001DBC  14FC 0041               1427  APPAF           MOVE.B  #'A', (A2)+
00001DC0  0602 0028               1428                  ADDI.B  #40, D2
00001DC4  D401                    1429                  ADD.B   D1, D2
00001DC6  14C2                    1430                  MOVE.B  D2, (A2)+
00001DC8  4EF8 1DA0               1431                  JMP     RTN_APPAF
00001DCC                          1432  
00001DCC                          1433  *-----------------------------------------------------------------------------------------------------------
00001DCC                          1434  *BACKWARDS LIST - SAME AS BEFORE BUT WE HAVE TO GO THE OTHER WAY FOR(INT D0 = 0; D0 <= D1; D0++)
00001DCC                          1435  *-----------------------------------------------------------------------------------------------------------
00001DCC  323C 000F               1436  BACKWARDLIST    MOVE.W  #0015, D1             *BIG UGLY FOR LOOP
00001DD0  303C 0000               1437                  MOVE.W  #0000, D0
00001DD4  343C 0000               1438                  MOVE.W  #0000, D2
00001DD8  E34B                    1439  BCKWRDLOOP      LSL.W   #1, D3
00001DDA  6500 000C               1440                  BCS     APPENDDORA
00001DDE  5200                    1441  RTN_APPD        ADDI.B  #1, D0
00001DE0  B041                    1442                  CMP     D1, D0
00001DE2  6FF4                    1443                  BLE     BCKWRDLOOP
00001DE4  4EF8 1D6E               1444                  JMP     RTN_LIST 
00001DE8                          1445  
00001DE8                          1446  *-----------------------------------------------------------------------------------------------------------
00001DE8                          1447  *APPEND D OR A - SAME AS ABOVE BUT DIFFERENT REGISTERS WERE USED...I SHOULDN'T HAVE DONE THAT...
00001DE8                          1448  *-----------------------------------------------------------------------------------------------------------             
00001DE8  0C00 0007               1449  APPENDDORA      CMPI.B  #7, D0
00001DEC  6E00 002A               1450                  BGT     APPA
00001DF0  14FC 0044               1451                  MOVE.B  #'D', (A2)+
00001DF4  0602 0030               1452                  ADDI.B  #48, D2
00001DF8  D400                    1453                  ADD.B   D0, D2
00001DFA  14C2                    1454                  MOVE.B  D2, (A2)+
00001DFC  B67C 0000               1455  RTN_APPA        CMP.W   #0, D3
00001E00  6700 0008               1456                  BEQ     RTN_SLASH
00001E04  4EF9 00001E10           1457                  JMP     APPENDSLASH
00001E0A  4242                    1458  RTN_SLASH       CLR     D2
00001E0C  4EF8 1DDE               1459                  JMP     RTN_APPD            *END BIG UGLY FOR LOOP
00001E10                          1460  
00001E10                          1461  *-----------------------------------------------------------------------------------------------------------
00001E10                          1462  *APPEND SLASH - SAME AS ABOVE BUT DIFFERENT REGISTERS ARE USED FOR THE FORWARD LOOP....STUPID....
00001E10                          1463  *-----------------------------------------------------------------------------------------------------------               
00001E10  14FC 002F               1464  APPENDSLASH     MOVE.B  #$2F, (A2)+     *ADD SLASH = 2F IN HEX
00001E14  4EF8 1E0A               1465                  JMP     RTN_SLASH 
00001E18                          1466                  
00001E18  14FC 0041               1467  APPA            MOVE.B  #'A', (A2)+
00001E1C  0602 0028               1468                  ADDI.B  #40, D2
00001E20  D400                    1469                  ADD.B   D0, D2
00001E22  14C2                    1470                  MOVE.B  D2, (A2)+
00001E24  4EF8 1DFC               1471                  JMP     RTN_APPA
00001E28                          1472  
00001E28                          1473  *-----------------------------------------------------------------------------------------------------------
00001E28                          1474  *GET LIST MASK - MOVES THE LIST MASK FROM MEMORY TO D3 TO BE SHIFTED FOR EACH REGISTER SAVED
00001E28                          1475  *-----------------------------------------------------------------------------------------------------------
00001E28  361E                    1476  GETLISTMASK     MOVE.W  (A6)+, D3      *THANKS!
00001E2A  4E75                    1477                  RTS     
00001E2C                          1478                
00001E2C                          1479  *-----------------------------------------------------------------------------------------------------------
00001E2C                          1480  *SET EA REGISTERS - PUTS THE DIRECTION, MODE, AND REGISTER ID D4, D5, AND D6 TO BE CHECKED FOR ERRORS AND W/E
00001E2C                          1481  *-----------------------------------------------------------------------------------------------------------
00001E2C  381E                    1482  SETEAREGISTERS  MOVE.W (A6)+, D4       *COPY COMMAND INTO D4, 5 AND 6 TO BE PARSED
00001E2E  3204                    1483                  MOVE.W  D4, D1         *FOR DIRECTION, MODE AND REG
00001E30  3004                    1484                  MOVE.W  D4, D0  
00001E32  EB4C                    1485                  LSL.W   #5, D4         *SHIFTING FOR DIRECTION
00001E34  E04C                    1486                  LSR.W   #8, D4
00001E36  EE4C                    1487                  LSR.W   #7, D4
00001E38  E149                    1488                  LSL.W   #8, D1         *SHIFTING FOR MODE
00001E3A  E549                    1489                  LSL.W   #2, D1
00001E3C  E049                    1490                  LSR.W   #8, D1
00001E3E  EA49                    1491                  LSR.W   #5, D1
00001E40  E148                    1492                  LSL.W   #8, D0         *SHIFTING FOR REGISTER
00001E42  EB48                    1493                  LSL.W   #5, D0
00001E44  E048                    1494                  LSR.W   #8, D0
00001E46  EA48                    1495                  LSR.W   #5, D0
00001E48  4E75                    1496                  RTS
00001E4A                          1497  
00001E4A                          1498  *---------------------------------------------------------------------------------------------------------
00001E4A                          1499  *isLEA            (IS LEA)- TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN LEA COMMAND
00001E4A                          1500  *
00001E4A                          1501  *PRE CONDITIONS -  A6 POINTS TO START OF LEA COMMAND
00001E4A                          1502  *
00001E4A                          1503  *POST CONDITIONS - A2 POINTS TO NEXT AVAILABLE LOCATION TO ADD NEXT ASCII INSTRUCTION. DO NOT INCREMENT
00001E4A                          1504  *                  A2, ALREADY DONE! A6 POINTS TO START OF NEXT COMMAND OR AND OF FILE IF ALL COMMANDS HAVE
00001E4A                          1505  *                  BEEN DIASSEMBLED. DO NOT INC A6, ALREADY DONE. ASCII STRINGS HAVE BEEN ADDED TO (A2) IF
00001E4A                          1506  *                  NO ERRORS OCCURED. THE STATE OF ALL OTHER REGISTERS IS EXACTLY HOW THEY WERE BEFORE CALLING THIS
00001E4A                          1507  *---------------------------------------------------------------------------------------------------------
00001E4A  48F8 3BFF 0400          1508  ISLEA            MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
Line 1509 ERROR: Symbol defined more than once
00001E50  48F8 3BFF 0400          1509  isLEA            MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
Line 1510 ERROR: Symbol defined more than once
00001E56  48F8 3BFF 0400          1510  ISLEA            MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001E5C  4EB9 00002304           1511                   JSR         CLRALLDREG                           
00001E62  301E                    1512                   MOVE.W      (A6)+, D0                        *GET CURRENT OP CODE DATA TO D7
00001E64  4EB8 1C9C               1513                   JSR         GETMOVEREG
00001E68  4EB9 0000216E           1514                   JSR         ERRORCHECK
00001E6E  0C78 BEEF 0456          1515                   CMP.W       #$BEEF, $456
00001E74  6700 0030               1516                   BEQ         LEABADDATA
00001E78  7C01                    1517                   MOVE.L      #1, D6                           *INDICATES LONG FOR IMMEDIATE ADDRESSING
00001E7A  4EB9 000021D4           1518                   JSR         APPENDEA
00001E80  14FC 002C               1519                   MOVE.B      #',', (A2)+                      *ADD SPACE BETWEEN ADDRESSES
00001E84  14FC 0020               1520                   MOVE.B      #' ', (A2)+                      *ADD COMMA BETWEEN ADDRESSES
00001E88  4EB9 000021CE           1521                   JSR         SWAP
00001E8E  323C 0001               1522                   MOVE.W      #1, D1
00001E92  4EB9 000021D4           1523                   JSR         APPENDEA
00001E98  4CF8 3BFF 0400          1524  LEARTN           MOVEM.L     $400, D0-D7/A0/A1/A3-A5
00001E9E  7C00                    1525                   MOVE.L      #0, D6
00001EA0  7E00                    1526                   MOVE.L      #0, D7
00001EA2  7E00                    1527                   MOVE.L      #0, D7
00001EA4  4E75                    1528                   RTS
00001EA6                          1529  
00001EA6                          1530  *-----------------------------------------------------------------------------------------------------------
00001EA6                          1531  *LEABAD DATA - SETS BEEF FLAG IF BAD DATA
00001EA6                          1532  *-----------------------------------------------------------------------------------------------------------
00001EA6  4EB9 000023E4           1533  LEABADDATA       JSR         BADDATA
00001EAC  4EF8 1E98               1534                   JMP         LEARTN
00001EB0                          1535                  
00001EB0                          1536  *---------------------------------------------------------------------------------------------------------
00001EB0                          1537  *IS ORIB/W/L       TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN ORI COMMAND
00001EB0                          1538  *
00001EB0                          1539  *PRE CONDITIONS -  A6 POINTS TO START OF MOVE COMMAND. A2 POINTS TO LOCATION AFTER MOVE STRING AND TAB
00001EB0                          1540  *
00001EB0                          1541  *POST CONDITIONS - A6 POINTS TO NEXT COMMAND TO BE DISASSEMBLED. A2 POINTS TO NEXT LOCATION TO BE APPENDED,
00001EB0                          1542  *                  DELIMETER SHOULD BE ADDED TO THIS LOCATION IMMEDIATELY. ALL OTHER ADDRESS AND DATA 
00001EB0                          1543  *                  REGISTERS ARE PRESERVED. EXCEPT D6, D6 IS GONE....SORRY
00001EB0                          1544  *---------------------------------------------------------------------------------------------------------            
00001EB0  7C01                    1545  ISORIL          MOVE.L      #1, D6                           *INDICATES LONG DATA
00001EB2  4EB9 00001EBA           1546                  JSR         ISORI                                                                             
00001EB8  4E75                    1547                  RTS   
00001EBA  48F8 3BFF 0400          1548  ISORI           MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001EC0  4EB9 00001EC8           1549                  JSR         ISORIB                                                                             
00001EC6  4E75                    1550                  RTS   
00001EC8  48F8 3BFF 0400          1551  ISORIB          MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001ECE  4EB8 1EBA               1552                  JSR         ISORI                                                                             
00001ED2  4E75                    1553                  RTS   
Line 1554 ERROR: Symbol defined more than once
00001ED4  48F8 3BFF 0400          1554  ISORI           MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001EDA  4EB9 00002304           1555                  JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001EE0  301E                    1556                  MOVE.W      (A6)+, D0
00001EE2  4EB8 1C9C               1557                  JSR         GETMOVEREG                                              
00001EE6  4EB9 0000216E           1558                  JSR         ERRORCHECK                        *CHECK FOR ERRORS, $BEEF AT $456 IF ERRORS EXISTS
00001EEC  0C78 BEEF 0456          1559                  CMP.W       #$BEEF, $456                     *IF $BEEF, APPEND BAD DATA STRING TO A2
00001EF2  6700 0024               1560                  BEQ         ORIBADDATA
00001EF6  4EB9 000021B6           1561                  JSR         APPENDIMMEDIATE                  *ELSE APPEND SRC AE
00001EFC  14FC 002C               1562                  MOVE.B      #',', (A2)+
00001F00  14FC 0020               1563                  MOVE.B      #' ', (A2)+
00001F04  4EB9 000021D4           1564                  JSR         APPENDEA                         *APPEND DESTINATION EA
00001F0A  4CF8 3BFF 0400          1565  RTN_BADORI      MOVEM.L     $400, D0-D7/A0/A1/A3-A5          *RESTORE JEENS REGISTERS
00001F10  7C00                    1566                  MOVE.L      #0, D6
00001F12  7E00                    1567                  MOVE.L      #0, D7
00001F14  7E00                    1568                  MOVE.L      #0, D7
00001F16  4E75                    1569                  RTS 
00001F18                          1570  
00001F18                          1571  *---------------------------------------------------------------------------------------------------------
00001F18                          1572  *ORI BAD DATA - BAD DATA FOUND, CLEANUP AND RETURN
00001F18                          1573  *---------------------------------------------------------------------------------------------------------      
00001F18  4EB9 000023E4           1574  ORIBADDATA  JSR         BADDATA
00001F1E  4EF8 1F0A               1575              JMP         RTN_BADORI      
00001F22                          1576                  
00001F22                          1577  *---------------------------------------------------------------------------------------------------------
00001F22                          1578  *IS NEGB/W/L       TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN NEG COMMAND
00001F22                          1579  *
00001F22                          1580  *PRE CONDITIONS -  A6 POINTS TO START OF MOVE COMMAND. A2 POINTS TO LOCATION AFTER MOVE STRING AND TAB
00001F22                          1581  *
00001F22                          1582  *POST CONDITIONS - A6 POINTS TO NEXT COMMAND TO BE DISASSEMBLED. A2 POINTS TO NEXT LOCATION TO BE APPENDED,
00001F22                          1583  *                  DELIMETER SHOULD BE ADDED TO THIS LOCATION IMMEDIATELY. ALL OTHER ADDRESS AND DATA 
00001F22                          1584  *                  REGISTERS ARE PRESERVED. EXCEPT D6, D6 IS GONE....SORRY
00001F22                          1585  *---------------------------------------------------------------------------------------------------------             
00001F22  7C01                    1586  ISNEGL          MOVE.L      #1, D6                           *INDICATES LONG DATA
00001F24  4EB9 00001F2C           1587                  JSR         ISNEGB
00001F2A  4E75                    1588                  RTS
00001F2C  48F8 3BFF 0400          1589  ISNEGB          MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001F32  4EB9 00002304           1590                  JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001F38  301E                    1591                  MOVE.W      (A6)+, D0
00001F3A  4EB8 1C9C               1592                  JSR         GETMOVEREG                                               
00001F3E  4EB9 0000216E           1593                  JSR         ERRORCHECK                        *CHECK FOR ERRORS, $BEEF AT $456 IF ERRORS EXISTS
00001F44  4EB9 00001F4C           1594                  JSR         ISNEG
00001F4A  4E75                    1595                  RTS
00001F4C  48F8 3BFF 0400          1596  ISNEG           MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001F52  4EB9 00002304           1597                  JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001F58  301E                    1598                  MOVE.W      (A6)+, D0
00001F5A  4EB8 1C9C               1599                  JSR         GETMOVEREG                                               
00001F5E  4EB9 0000216E           1600                  JSR         ERRORCHECK                       *CHECK FOR ERRORS, $BEEF AT $456 IF ERRORS EXISTS
00001F64  0C78 BEEF 0456          1601                  CMP.W       #$BEEF, $456                     *IF $BEEF, APPEND BAD DATA STRING TO A2
00001F6A  6700 0016               1602                  BEQ         NEGBADDATA
00001F6E  4EB9 000021D4           1603                  JSR         APPENDEA                         *APPEND DESTINATION EA
00001F74  4CF8 3BFF 0400          1604  RTN_NEGERR      MOVEM.L     $400, D0-D7/A0/A1/A3-A5
00001F7A  7C00                    1605                  MOVE.L      #0, D6
00001F7C  7E00                    1606                  MOVE.L      #0, D7
00001F7E  7E00                    1607                  MOVE.L      #0, D7
00001F80  4E75                    1608                  RTS
00001F82                          1609  
00001F82                          1610  *---------------------------------------------------------------------------------------------------------
00001F82                          1611  *ORI BAD DATA - BAD DATA FOUND, CLEANUP AND RETURN
00001F82                          1612  *---------------------------------------------------------------------------------------------------------      
00001F82  4EB9 000023E4           1613  NEGBADDATA  JSR         BADDATA
00001F88  4EF8 1F74               1614              JMP         RTN_NEGERR
00001F8C                          1615  
00001F8C                          1616  *---------------------------------------------------------------------------------------------------------
00001F8C                          1617  *IS E/ORB/W/L        TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN OR/EOR COMMAND
00001F8C                          1618  *
00001F8C                          1619  *PRE CONDITIONS -  A6 POINTS TO START OF MOVE COMMAND. A2 POINTS TO LOCATION AFTER MOVE STRING AND TAB
00001F8C                          1620  *
00001F8C                          1621  *POST CONDITIONS - A6 POINTS TO NEXT COMMAND TO BE DISASSEMBLED. A2 POINTS TO NEXT LOCATION TO BE APPENDED,
00001F8C                          1622  *                  DELIMETER SHOULD BE ADDED TO THIS LOCATION IMMEDIATELY. ALL OTHER ADDRESS AND DATA 
00001F8C                          1623  *                  REGISTERS ARE PRESERVED. EXCEPT D6...
00001F8C                          1624  *---------------------------------------------------------------------------------------------------------
00001F8C  7C01                    1625  ISEORB          MOVE.L      #1, D6                           *INDICATES EXCULIVE OR OPERATION TO THE OR DISASSEMBLER
00001F8E  4EB9 00001F96           1626                  JSR         ISORB
00001F94  4E75                    1627                  RTS
00001F96  48F8 3BFF 0400          1628  ISORB           MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001F9C  7C01                    1629  ISEORL          MOVE.L      #1, D6
00001F9E  4EB9 00001FAE           1630                  JSR         ISEOR   
00001FA4  4E75                    1631                  RTS
00001FA6  7C01                    1632  ISORL           MOVE.L      #1, D6
00001FA8  4EB9 00001FB8           1633                  JSR         ISOR
00001FAE  7E01                    1634  ISEOR           MOVE.L      #1, D7                           *INDICATES EXCULIVE OR OPERATION TO THE OR DISASSEMBLER
00001FB0  4EB9 00001FB8           1635                  JSR         ISOR
00001FB6  4E75                    1636                  RTS
00001FB8  48F8 3BFF 0400          1637  ISOR            MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
00001FBE  4EB9 00002304           1638                  JSR         CLRALLDREG                       *CLEAR REGISTERS FOR USE
00001FC4  381E                    1639                  MOVE.W      (A6)+, D4
00001FC6  4EB9 0000202E           1640                  JSR         PARSEOROP 
00001FCC  0C04 0002               1641                  CMPI.B      #2, D4                           *IF OPMODE GREATER THAN 2 DN IS SOURCE
00001FD0  6E00 006C               1642                  BGT         PARSEDNSOURCE    
00001FD4  4EB9 0000206C           1643                  JSR         PARSEDNDEST                                          
00001FDA  4EB9 0000216E           1644  RTN_PARSEOR     JSR         ERRORCHECK                        *CHECK FOR ERRORS, $BEEF AT $456 IF ERRORS EXISTS
00001FE0  4EB9 000021CE           1645                  JSR         SWAP
00001FE6  4EB9 0000216E           1646                  JSR         ERRORCHECK  
00001FEC  4EB9 000021CE           1647                  JSR         SWAP
00001FF2  0C78 BEEF 0456          1648                  CMP.W       #$BEEF, $456                     *IF $BEEF, APPEND BAD DATA STRING TO A2
00001FF8  6700 002A               1649                  BEQ         ORBADDATA
00001FFC  4EB9 000021D4           1650                  JSR         APPENDEA                         *APPEND DESTINATION EA
00002002  4EB9 000021CE           1651                  JSR         SWAP
00002008  14FC 002C               1652                  MOVE.B      #',', (A2)+
0000200C  14FC 0020               1653                  MOVE.B      #' ', (A2)+
00002010  4EB9 000021D4           1654                  JSR         APPENDEA
00002016  4CF8 3BFF 0400          1655  RTN_OR          MOVEM.L     $400, D0-D7/A0/A1/A3-A5
0000201C  7C00                    1656                  MOVE.L      #0, D6
0000201E  7E00                    1657                  MOVE.L      #0, D7
00002020  7E00                    1658                  MOVE.L      #0, D7
00002022  4E75                    1659                  RTS
00002024                          1660  
00002024                          1661  *---------------------------------------------------------------------------------------------------------
00002024                          1662  *ORI BAD DATA - BAD DATA FOUND, CLEANUP AND RETURN
00002024                          1663  *---------------------------------------------------------------------------------------------------------      
00002024  4EB9 000023E4           1664  ORBADDATA   JSR         BADDATA
0000202A  4EF8 2016               1665              JMP         RTN_OR
0000202E                          1666  
0000202E                          1667  *---------------------------------------------------------------------------------------------------------
0000202E                          1668  *PARSE OR OP MODE - PARSES THE OPMODE FROM THE COMMAND TO DETERMINE IF DATA REGISTER IS SOURCE OR 
0000202E                          1669  *                   DESTINATION OPERAND
0000202E                          1670  *---------------------------------------------------------------------------------------------------------
0000202E  3004                    1671  PARSEOROP       MOVE.W      D4, D0
00002030  3204                    1672                  MOVE.W      D4, D1
00002032  3404                    1673                  MOVE.W      D4, D2
00002034  3604                    1674                  MOVE.W      D4, D3
00002036  EF4C                    1675                  LSL.W       #7, D4
00002038  E04C                    1676                  LSR.W       #8, D4
0000203A  EA4C                    1677                  LSR.W       #5, D4
0000203C  4E75                    1678                  RTS
0000203E                          1679  
0000203E                          1680  *---------------------------------------------------------------------------------------------------------
0000203E                          1681  *PARSE DN SOURCE - PARSES ADDRESSING REGISTER AND MODE IF DN IS KNOWN TO BE SOURCE OPERAND
0000203E                          1682  *---------------------------------------------------------------------------------------------------------                
0000203E  323C 0000               1683  PARSEDNSOURCE   MOVE.W      #0, D1
00002042  E948                    1684                  LSL.W       #4, D0
00002044  E048                    1685                  LSR.W       #8, D0
00002046  EA48                    1686                  LSR.W       #5, D0  
00002048  E14A                    1687                  LSL.W       #8, D2
0000204A  EB4A                    1688                  LSL.W       #5, D2
0000204C  E04A                    1689                  LSR.W       #8, D2
0000204E  EA4A                    1690                  LSR.W       #5, D2
00002050  E14B                    1691                  LSL.W       #8, D3
00002052  E54B                    1692                  LSL.W       #2, D3
00002054  E04B                    1693                  LSR.W       #8, D3
00002056  EA4B                    1694                  LSR.W       #5, D3
00002058  0C07 0001               1695                  CMPI.B      #1, D7
0000205C  0C06 0001               1696                  CMPI.B      #1, D6
00002060  0C07 0001               1697                  CMPI.B      #1, D7
00002064  6700 002E               1698                  BEQ         RTN_STRGCASE
00002068  4EF8 1FDA               1699                  JMP         RTN_PARSEOR 
0000206C                          1700  
0000206C                          1701  *---------------------------------------------------------------------------------------------------------
0000206C                          1702  *PARSE DN DESTINATION - PARSES ADDRESSING REGISTER AND MODE IF DN IS KNOWN TO BE DESTINATION OPERAND
0000206C                          1703  *---------------------------------------------------------------------------------------------------------
0000206C  0C07 0001               1704  PARSEDNDEST     CMPI.B      #1, D7
Line 1705 ERROR: Symbol defined more than once
00002070  0C06 0001               1705  PARSEDNDEST     CMPI.B      #1, D6
Line 1706 ERROR: Symbol defined more than once
00002074  0C07 0001               1706  PARSEDNDEST     CMPI.B      #1, D7
00002078  67C4                    1707                  BEQ         PARSEDNSOURCE
0000207A  363C 0000               1708                  MOVE.W      #0, D3
0000207E  E94A                    1709                  LSL.W       #4, D2
00002080  E04A                    1710                  LSR.W       #8, D2
00002082  EA4A                    1711                  LSR.W       #5, D2  
00002084  E148                    1712                  LSL.W       #8, D0
00002086  EB48                    1713                  LSL.W       #5, D0
00002088  E048                    1714                  LSR.W       #8, D0
0000208A  EA48                    1715                  LSR.W       #5, D0
0000208C  E149                    1716                  LSL.W       #8, D1
0000208E  E549                    1717                  LSL.W       #2, D1
00002090  E049                    1718                  LSR.W       #8, D1
00002092  EA49                    1719                  LSR.W       #5, D1
00002094  4E75                    1720  RTN_STRGCASE    RTS
00002096                          1721  
00002096                          1722  *---------------------------------------------------------------------------------------------------------
00002096                          1723  *IS SHIFTY STUFF    TO BE CALLED IF CURRENT INSTRUCTION POINTED TO BY A6 IS A KNOWN LSR,LSL, ASL, ASL, ROR, ROL
00002096                          1724  *
00002096                          1725  *PRE CONDITIONS -  A6 POINTS TO START OF LEA COMMAND
00002096                          1726  *
00002096                          1727  *POST CONDITIONS - A2 POINTS TO NEXT AVAILABLE LOCATION TO ADD NEXT ASCII INSTRUCTION. DO NOT INCREMENT
00002096                          1728  *                  A2, ALREADY DONE! A6 POINTS TO START OF NEXT COMMAND OR AND OF FILE IF ALL COMMANDS HAVE
00002096                          1729  *                  BEEN DIASSEMBLED. DO NOT INC A6, ALREADY DONE. ASCII STRINGS HAVE BEEN ADDED TO (A2) IF
00002096                          1730  *                  NO ERRORS OCCURED. THE STATE OF ALL OTHER REGISTERS IS EXACTLY HOW THEY WERE BEFORE CALLING THIS
00002096                          1731  *---------------------------------------------------------------------------------------------------------
00002096  48F8 3BFF 0400          1732  ISSHIFTYSTUFF    MOVEM.L     D0-D7/A0/A1/A3-A5, $400          *SAVE JEENS REGISTERS AT $400
0000209C  4EB9 00002304           1733                   JSR         CLRALLDREG                           
000020A2  301E                    1734                   MOVE.W      (A6)+, D0                        *GET CURRENT OP CODE DATA TO D7
000020A4  4EB9 000020FC           1735                   JSR         SHIFTSIZE
000020AA  4EB8 1C9C               1736                   JSR         GETMOVEREG
000020AE  4EB9 000021CE           1737                   JSR         SWAP
000020B4  0C04 0003               1738                   CMPI.B      #3, D4
000020B8  6700 004C               1739                   BEQ         MEMORYSHIFT                           *SHIFT FOR I/R
000020BC  0C03 0003               1740                   CMPI.B      #3, D3
000020C0  6F00 006C               1741                   BLE         SETUP 
000020C4  123C 0000               1742                   MOVE.B      #0, D1
000020C8  163C 0000               1743                   MOVE.B      #0, D3
000020CC  4EB9 000021D4           1744                   JSR         APPENDEA
000020D2  14FC 002C               1745  RTN_SETUP        MOVE.B      #',', (A2)+                      *ADD SPACE BETWEEN ADDRESSES
000020D6  14FC 0020               1746                   MOVE.B      #' ', (A2)+                      *ADD COMMA BETWEEN ADDRESSES
000020DA  4EB9 000021CE           1747                   JSR         SWAP
000020E0  4EB9 000021D4           1748                   JSR         APPENDEA
000020E6  4CF8 3BFF 0400          1749  RTN_MEMSHIFT     MOVEM.L     $400, D0-D7/A0/A1/A3-A5
000020EC  7C00                    1750                   MOVE.L      #0, D6
000020EE  7E00                    1751                   MOVE.L      #0, D7
000020F0  4E75                    1752                   RTS
000020F2                          1753  
000020F2                          1754  *-----------------------------------------------------------------------------------------------------------
000020F2                          1755  *SHIFT BAD DATA DATA - SETS BEEF FLAG IF BAD DATA
000020F2                          1756  *-----------------------------------------------------------------------------------------------------------
000020F2  4EB9 000023E4           1757  SHIFTBADDATA     JSR         BADDATA
000020F8  4EF8 20E6               1758                   JMP         RTN_MEMSHIFT
000020FC                          1759  
000020FC                          1760  *-----------------------------------------------------------------------------------------------------------
000020FC                          1761  *SHIFT SIZE - SHIFT DATA TO RETRIEVE SIZE DATA
000020FC                          1762  *-----------------------------------------------------------------------------------------------------------                 
000020FC  3800                    1763  SHIFTSIZE        MOVE.W     D0, D4
000020FE  E14C                    1764                   LSL.W      #8, D4
00002100  E04C                    1765                   LSR.W      #8, D4
00002102  EC4C                    1766                   LSR.W      #6, D4
00002104  4E75                    1767                   RTS
00002106                          1768  
00002106                          1769  *-----------------------------------------------------------------------------------------------------------
00002106                          1770  *MEMORY SHIFT - MEMORY SHIFT DETERMINED, APPEND APPROPRIATELY
00002106                          1771  *-----------------------------------------------------------------------------------------------------------                 
00002106  4EB9 00002110           1772  MEMORYSHIFT     JSR         SHIFTMEM
0000210C  4EF8 20E6               1773                  JMP         RTN_MEMSHIFT
00002110                          1774   
00002110                          1775  *-----------------------------------------------------------------------------------------------------------
00002110                          1776  *SHIFT MEMORY - MEMORY SHIFT DETERMINED, CHECK FOR ERRORS AND APPEND STRING TO A2
00002110                          1777  *-----------------------------------------------------------------------------------------------------------               
00002110  4EB9 000021CE           1778  SHIFTMEM        JSR         SWAP
00002116  4EB9 0000216E           1779                  JSR         ERRORCHECK
0000211C  0C78 BEEF 0456          1780                  CMP.W       #$BEEF, $456         
00002122  6700 002E               1781                  BEQ         BADSHIFTYDATA
00002126  4EB9 000021D4           1782                  JSR         APPENDEA
0000212C  4E75                    1783                  RTS
0000212E                          1784  
0000212E                          1785  *-----------------------------------------------------------------------------------------------------------
0000212E                          1786  *SET UP - SETS UP REGISTER DATA TO BE PRINTED
0000212E                          1787  *-----------------------------------------------------------------------------------------------------------                
0000212E  14FC 0023               1788  SETUP           MOVE.B      #'#', (A2)+
00002132  123C 0000               1789                  MOVE.B      #0, D1
00002136  163C 0000               1790                  MOVE.B      #0, D3
0000213A  0C00 0000               1791                  CMPI.B      #0, D0
0000213E  6700 000C               1792                  BEQ         MAKEZEROEIGHT
00002142  4EB9 00002378           1793  RTN_ZE          JSR         APPENDDISPLACE
00002148  4EF8 20D2               1794                  JMP         RTN_SETUP
0000214C  5040                    1795  MAKEZEROEIGHT   ADDI.W      #8, D0 
0000214E  4EF8 2142               1796                  JMP         RTN_ZE
00002152  4EB9 000023E4           1797  BADSHIFTYDATA   JSR         BADDATA
00002158  4EF8 20E6               1798                  JMP         RTN_MEMSHIFT
0000215C                          1799  
0000215C                          1800  *-----------------------------------------------------------------------------------------------------------
0000215C                          1801  **********************************************SHARED-CODE-SECTION******************************************* 
0000215C                          1802  *-----------------------------------------------------------------------------------------------------------
0000215C                          1803  *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~HEHE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
0000215C                          1804  *-----------------------------------------------------------------------------------------------------------
0000215C                          1805  **********************************************SHARED-CODE-SECTION******************************************* 
0000215C                          1806  *-----------------------------------------------------------------------------------------------------------
0000215C                          1807  
0000215C                          1808  *---------------------------------------------------------------------------------------------------------
0000215C                          1809  *RECOVER POINTER  - RECOVERS A2 IN CASE OF BAD DATA (INSUPPORTED ADDRESSING MODES) DOES THIS MAKE SENSE??
0000215C                          1810  *---------------------------------------------------------------------------------------------------------
0000215C  0C06 0001               1811  RECOVERPTR          CMPI.B      #1, D6
00002160  6700 0006               1812                      BEQ         INCPTRLONG  
00002164  544E                    1813                      ADDA        #2, A6
00002166  4E75                    1814  RTN_LONGPTR         RTS
00002168  584E                    1815  INCPTRLONG          ADDA        #4, A6
0000216A  4EF8 2166               1816                      JMP         RTN_LONGPTR
0000216E                          1817                      
0000216E                          1818  *---------------------------------------------------------------------------------------------------------
0000216E                          1819  *ERROR CHECK - CHECKS ADDRESSING MODES AND ADDRESSING REGISTERS FOR GENERAL ERRORS THAT APPLY TO ALL OP CODES
0000216E                          1820  *---------------------------------------------------------------------------------------------------------            
0000216E  4EB9 00002176           1821  ERRORCHECK      JSR         CHECKMODE
00002174  4E75                    1822  RTN_REGCHK      RTS
00002176  0C01 0005               1823  CHECKMODE       CMPI.B      #5, D1
0000217A  6700 0030               1824                  BEQ         ERROR2
0000217E  0C01 0006               1825                  CMPI.B      #6, D1
00002182  6700 0028               1826                  BEQ         ERROR2
00002186  6700 04BC               1827                  BEQ         ERROR
0000218A  6700 0020               1828                  BEQ         ERROR2
0000218E  0C01 0007               1829                  CMPI.B      #7, D1
00002192  6700 0004               1830                  BEQ         CHECKREG
00002196  4E75                    1831                  RTS
00002198  0C00 0002               1832  CHECKREG        CMPI.B      #2, D0
0000219C  6700 000E               1833                  BEQ         ERROR2
000021A0  0C00 0003               1834                  CMPI.B      #3, D0
000021A4  6700 0006               1835                  BEQ         ERROR2
000021A8  4EF8 2174               1836                  JMP         RTN_REGCHK
000021AC  31FC BEEF 0456          1837  ERROR2          MOVE.W      #$BEEF, $456
000021B2  4EF8 2174               1838                  JMP         RTN_REGCHK
000021B6                          1839  
000021B6                          1840  *---------------------------------------------------------------------------------------------------------
000021B6                          1841  *APPENDS IMMEDIATE  - APPEND IMMEDIATE DATA FROM A6 TO A2 DEPENDING ON WORD OR LONG ADDRESSING MODE
000021B6                          1842  *                     INDICATED BY D6, (1 FOR LONG, 0 FOR WORD)
000021B6                          1843  *---------------------------------------------------------------------------------------------------------                
000021B6  14FC 0023               1844  APPENDIMMEDIATE MOVE.B      #'#', (A2)+
000021BA  14FC 0024               1845                  MOVE.B      #'$', (A2)+
000021BE  BC3C 0001               1846                  CMP.B       #1, D6
000021C2  6700 00AA               1847                  BEQ         ISLONG
000021C6  4EB9 00002322           1848                  JSR         APPENDWORD
000021CC  4E75                    1849                  RTS
000021CE                          1850                  
000021CE                          1851  *---------------------------------------------------------------------------------------------------------
000021CE                          1852  *SWAP  - SWAPS D0 AND D1 WITH D2 AND D3 SO ERROR CHECKING CAN BE DONE ONE BOTH SOURCE AND DEST OPERANDS
000021CE                          1853  *---------------------------------------------------------------------------------------------------------
000021CE  C142                    1854  SWAP            EXG         D0, D2
000021D0  C343                    1855                  EXG         D1, D3
000021D2  4E75                    1856                  RTS
000021D4                          1857  
000021D4                          1858  *---------------------------------------------------------------------------------------------------------
000021D4                          1859  *APPEND EA          - APPENDS ADDRESSES DEPENDING ON ADDRESSING MODES USED
000021D4                          1860  *PRE-CONDITIONS     - ERROR CHECKING HAS BEEN COMPLETED. D0 CONTAINS ADDRESSING REGISTER. D1 CONTAINS
000021D4                          1861  *                     ADDRESSING MODE. d6 contains 1 for immediate long addressing
000021D4                          1862  *---------------------------------------------------------------------------------------------------------           
000021D4  0C01 0007               1863  APPENDEA        CMPI.B      #7, D1
000021D8  6700 005E               1864                  BEQ         MSWORL
000021DC  0C01 0000               1865                  CMPI.B      #0, D1
000021E0  6700 0024               1866                  BEQ         MSDREG
000021E4  0C01 0001               1867                  CMPI.B      #1, D1
000021E8  6700 0026               1868                  BEQ         MSAREG
000021EC  0C01 0002               1869                  CMPI.B      #2, D1
000021F0  6700 0028               1870                  BEQ         MSAIREG
000021F4  0C01 0003               1871                  CMPI.B      #3, D1
000021F8  6700 002A               1872                  BEQ         MSAPIREG
000021FC  0C01 0004               1873                  CMPI.B      #4, D1
00002200  6700 002C               1874                  BEQ         MSAPDREG
00002204  4E75                    1875  RTN_APPSRC      RTS
00002206                          1876  
00002206                          1877  *---------------------------------------------------------------------------------------------------------
00002206                          1878  *APPEND MOVE SOURCE DATA REGISTER - APPENDS DN TO ADDRESS POINTED TO BY A2
00002206                          1879  *---------------------------------------------------------------------------------------------------------
00002206  4EB9 00002294           1880  MSDREG          JSR         APPENDSRCDREG
0000220C  4EF8 2204               1881                  JMP         RTN_APPSRC
00002210                          1882  
00002210                          1883  *---------------------------------------------------------------------------------------------------------
00002210                          1884  *APPEND MOVE SOURCE ADDRESS REGISTER - APPENDS AN TO ADDRESS POINTED TO BY A2
00002210                          1885  *---------------------------------------------------------------------------------------------------------                
00002210  4EB9 000022A4           1886  MSAREG          JSR         APPENDSRCAREG
00002216  4EF8 2204               1887                  JMP         RTN_APPSRC
0000221A                          1888  
0000221A                          1889  *---------------------------------------------------------------------------------------------------------
0000221A                          1890  *APPEND MOVE SOURCE ADRESS INDIRECT REGISTER - APPENDS (AN) TO ADDRESS POINTED TO BY A2
0000221A                          1891  *---------------------------------------------------------------------------------------------------------                
0000221A  4EB9 000022B4           1892  MSAIREG         JSR         APPENDSRCAIREG
00002220  4EF8 2204               1893                  JMP         RTN_APPSRC
00002224                          1894  
00002224                          1895  *---------------------------------------------------------------------------------------------------------
00002224                          1896  *APPEND MOVE SOURCE ADRESS INDIRECT POST INCREMENT REGISTER - APPENDS (AN)+ TO ADDRESS POINTED TO BY A2
00002224                          1897  *---------------------------------------------------------------------------------------------------------                
00002224  4EB9 000022CC           1898  MSAPIREG        JSR         APPENDSRCAPIREG
0000222A  4EF8 2204               1899                  JMP         RTN_APPSRC
0000222E                          1900  
0000222E                          1901  *---------------------------------------------------------------------------------------------------------
0000222E                          1902  *APPEND MOVE SOURCE ADRESS INDIRECT PRE DECREMENT REGISTER - APPENDS -(AN) TO ADDRESS POINTED TO BY A2
0000222E                          1903  *---------------------------------------------------------------------------------------------------------                
0000222E  4EB9 000022E8           1904  MSAPDREG        JSR         APPENDSRCAPDREG
00002234  4EF8 2204               1905                  JMP         RTN_APPSRC
00002238                          1906  
00002238                          1907  *---------------------------------------------------------------------------------------------------------
00002238                          1908  *MOVE SOURCE WORD OR LONG - SOURCE ADDRESSING MODE IS ABSOLUTE WORD OR LONG, APPEND APPROPRIATELY
00002238                          1909  *---------------------------------------------------------------------------------------------------------                
00002238  0C00 0000               1910  MSWORL          CMPI.B      #0, D0
0000223C  6700 0048               1911                  BEQ         MSWORD
00002240  0C00 0001               1912                  CMPI.B      #1, D0
00002244  6700 0032               1913                  BEQ         MSLONG
00002248  0C00 0004               1914                  CMPI.B      #4, D0
0000224C  6700 0006               1915                  BEQ         MSIMMEDIATE
00002250  4EF8 2204               1916                  JMP         RTN_APPSRC
00002254                          1917  
00002254                          1918  *---------------------------------------------------------------------------------------------------------
00002254                          1919  *MOVE SOURCE IMMEDIATE - SOURCE ADDRESSING MODE IS IMMEDIATE DATA, APPEND APPROPRIATELY
00002254                          1920  *---------------------------------------------------------------------------------------------------------                
00002254  14FC 0023               1921  MSIMMEDIATE     MOVE.B      #'#', (A2)+
00002258  14FC 0024               1922                  MOVE.B      #'$', (A2)+
0000225C  BC3C 0001               1923                  CMP.B       #1, D6
00002260  6700 000C               1924                  BEQ         ISLONG
00002264  4EB9 00002322           1925                  JSR         APPENDWORD
0000226A  4EF8 2204               1926                  JMP         RTN_APPSRC
0000226E                          1927  
0000226E                          1928  *---------------------------------------------------------------------------------------------------------
0000226E                          1929  *IS LONG - ADDRESSING MODE IS LONG, APPEND APPROPRIATELY
0000226E                          1930  *---------------------------------------------------------------------------------------------------------                
0000226E  4EB9 00002314           1931  ISLONG          JSR         APPENDLONG
00002274  4EF8 2204               1932                  JMP         RTN_APPSRC
00002278                          1933  
00002278                          1934  *---------------------------------------------------------------------------------------------------------
00002278                          1935  *MOVE SOURCE LONG - IS LONG, APPEND APPROPRIATELY
00002278                          1936  *---------------------------------------------------------------------------------------------------------                
00002278  14FC 0024               1937  MSLONG          MOVE.B      #'$', (A2)+
0000227C  4EB9 00002314           1938                  JSR         APPENDLONG
00002282  4EF8 2204               1939                  JMP         RTN_APPSRC
00002286                          1940  
00002286                          1941  *---------------------------------------------------------------------------------------------------------
00002286                          1942  *MOVE SOURCE WORD - ADDRESSING MODE IS ABSOLUTE WORD, APPEND APPROPRIATELY
00002286                          1943  *---------------------------------------------------------------------------------------------------------               
00002286  14FC 0024               1944  MSWORD          MOVE.B      #'$', (A2)+
0000228A  4EB9 00002322           1945                  JSR         APPENDWORD
00002290  4EF8 2204               1946                  JMP         RTN_APPSRC
00002294                          1947  
00002294                          1948  *---------------------------------------------------------------------------------------------------------
00002294                          1949  *APPEND DATA REGISTER - APPENDS DN TO A2
00002294                          1950  *---------------------------------------------------------------------------------------------------------
00002294  14FC 0044               1951  APPENDSRCDREG       MOVE.B      #'D', (A2)+
00002298  0600 0030               1952                      ADDI.B      #48, D0
0000229C  14C0                    1953                      MOVE.B      D0, (A2)+
0000229E  0400 0030               1954                      SUBI.B      #48, D0
000022A2  4E75                    1955                      RTS
000022A4                          1956  
000022A4                          1957  *---------------------------------------------------------------------------------------------------------
000022A4                          1958  *APPEND ADDRESS REGISTER - APPENDS AN TO A2
000022A4                          1959  *---------------------------------------------------------------------------------------------------------                    
000022A4  14FC 0041               1960  APPENDSRCAREG       MOVE.B      #'A', (A2)+
000022A8  0600 0030               1961                      ADDI.B      #48, D0
000022AC  14C0                    1962                      MOVE.B      D0, (A2)+
000022AE  0400 0030               1963                      SUBI.B      #48, D0
000022B2  4E75                    1964                      RTS
000022B4                          1965  
000022B4                          1966  *---------------------------------------------------------------------------------------------------------
000022B4                          1967  *APPEND ADDRESS REGISTER INDIRECT - APPENDS (AN) TO A2
000022B4                          1968  *---------------------------------------------------------------------------------------------------------                    
000022B4  14FC 0028               1969  APPENDSRCAIREG      MOVE.B      #'(', (A2)+
000022B8  14FC 0041               1970                      MOVE.B      #'A', (A2)+
000022BC  0600 0030               1971                      ADDI.B      #48, D0
000022C0  14C0                    1972                      MOVE.B      D0, (A2)+
000022C2  14FC 0029               1973                      MOVE.B      #')', (A2)+
000022C6  0400 0030               1974                      SUBI.B      #48, D0
000022CA  4E75                    1975                      RTS
000022CC                          1976  
000022CC                          1977  *---------------------------------------------------------------------------------------------------------
000022CC                          1978  *APPEND ADDRESS REGISTER POST INCREMENT - APPENDS (AN)+ TO A2
000022CC                          1979  *---------------------------------------------------------------------------------------------------------                     
000022CC  14FC 0028               1980  APPENDSRCAPIREG     MOVE.B      #'(', (A2)+
000022D0  14FC 0041               1981                      MOVE.B      #'A', (A2)+
000022D4  0600 0030               1982                      ADDI.B      #48, D0
000022D8  14C0                    1983                      MOVE.B      D0, (A2)+
000022DA  14FC 0029               1984                      MOVE.B      #')', (A2)+
000022DE  14FC 002B               1985                      MOVE.B      #'+', (A2)+
000022E2  0400 0030               1986                      SUBI.B      #48, D0
000022E6  4E75                    1987                      RTS
000022E8                          1988   
000022E8                          1989  *---------------------------------------------------------------------------------------------------------
000022E8                          1990  *APPEND ADDRESS REGISTER PRE DECREMENT - APPENDS -(AN) TO A2
000022E8                          1991  *---------------------------------------------------------------------------------------------------------                    
000022E8  14FC 002D               1992  APPENDSRCAPDREG     MOVE.B      #'-', (A2)+
000022EC  14FC 0028               1993                      MOVE.B      #'(', (A2)+
000022F0  14FC 0041               1994                      MOVE.B      #'A', (A2)+
000022F4  0600 0030               1995                      ADDI.B      #48, D0
000022F8  14C0                    1996                      MOVE.B      D0, (A2)+
000022FA  14FC 0029               1997                      MOVE.B      #')', (A2)+
000022FE  0400 0030               1998                      SUBI.B      #48, D0
00002302  4E75                    1999                      RTS
00002304                          2000  
00002304                          2001  *---------------------------------------------------------------------------------------------------------
00002304                          2002  *CLEA ALL D REG - CLEARS ALL DATA REGISTERS, EXCEPT D6 AND D7....I NEED IT, DONT ASK
00002304                          2003  *CLEA ALL D REG - CLEARS ALL DATA REGISTERS, EXCEPT D6....I NEED IT, DONT ASK
00002304                          2004  *CLEA ALL D REG - CLEARS ALL DATA REGISTERS, EXCEPT D6 AND D7....I NEED IT, DONT ASK
00002304                          2005  *--------------------------------------------------------------------------------------------------------- 
00002304  4240                    2006  CLRALLDREG          CLR         D0
00002306  4241                    2007                      CLR         D1
00002308  4242                    2008                      CLR         D2
0000230A  4243                    2009                      CLR         D3
0000230C  4244                    2010                      CLR         D4
0000230E  4245                    2011                      CLR         D5
00002310  4247                    2012                      CLR         D7
00002312  4E75                    2013                      RTS
00002314                          2014  
00002314                          2015  *---------------------------------------------------------------------------------------------------------
00002314                          2016  *APPEND LONG - APPENDS THE LONG ABSOLUTE ADDRESS TO A2
00002314                          2017  *---------------------------------------------------------------------------------------------------------                 
00002314  4EB9 00002322           2018  APPENDLONG          JSR         APPENDWORD
0000231A  4EB9 00002322           2019                      JSR         APPENDWORD
00002320  4E75                    2020                      RTS 
00002322                          2021   
00002322                          2022  *---------------------------------------------------------------------------------------------------------
00002322                          2023  *APPEND WORD - APPENDS THE WORD ABSOLUTE ADDRESS TO A2
00002322                          2024  *---------------------------------------------------------------------------------------------------------                 
00002322  48F8 00FF 0400          2025  APPENDWORD      MOVEM.L     D0-D7, $400
00002328  4EB8 2304               2026                  JSR         CLRALLDREG
0000232C  3E1E                    2027                  MOVE.W      (A6)+, D7
0000232E  3007                    2028                  MOVE.W      D7, D0
00002330  3207                    2029                  MOVE.W      D7, D1
00002332  3407                    2030                  MOVE.W      D7, D2
00002334  3607                    2031                  MOVE.W      D7, D3
00002336  E048                    2032                  LSR.W       #8, D0
00002338  E848                    2033                  LSR.W       #4, D0
0000233A  E949                    2034                  LSL.W       #4, D1
0000233C  E049                    2035                  LSR.W       #8, D1
0000233E  E849                    2036                  LSR.W       #4, D1
00002340  E14A                    2037                  LSL.W       #8, D2
00002342  E04A                    2038                  LSR.W       #8, D2
00002344  E84A                    2039                  LSR.W       #4, D2
00002346  E14B                    2040                  LSL.W       #8, D3
00002348  E94B                    2041                  LSL.W       #4, D3
0000234A  E04B                    2042                  LSR.W       #8, D3
0000234C  E84B                    2043                  LSR.W       #4, D3
0000234E  4EB9 000023D6           2044                  JSR         CONVERT
00002354  1001                    2045                  MOVE.B      D1, D0
00002356  4EB9 000023D6           2046                  JSR         CONVERT
0000235C  1002                    2047                  MOVE.B      D2, D0
0000235E  4EB9 000023D6           2048                  JSR         CONVERT
00002364  1003                    2049                  MOVE.B      D3, D0
00002366  4EB9 000023D6           2050                  JSR         CONVERT
0000236C  4EB8 2304               2051                  JSR         CLRALLDREG        
00002370  4CF8 00FF 0400          2052                  MOVEM.L     $400, D0-D7
00002376  4E75                    2053                  RTS
00002378                          2054  
00002378                          2055  *---------------------------------------------------------------------------------------------------------
00002378                          2056  *APPEND WORD - APPENDS THE WORD ABSOLUTE ADDRESS TO A2
00002378                          2057  *---------------------------------------------------------------------------------------------------------                 
00002378  14FC 0024               2058  APPENDDISPLACE  MOVE.B      #'$', (A2)+
0000237C  48F8 00FF 0400          2059                  MOVEM.L     D0-D7, $400
00002382  3200                    2060                  MOVE.W      D0, D1
00002384  3400                    2061                  MOVE.W      D0, D2
00002386  3600                    2062                  MOVE.W      D0, D3
00002388  E048                    2063                  LSR.W       #8, D0
0000238A  E848                    2064                  LSR.W       #4, D0
0000238C  E949                    2065                  LSL.W       #4, D1
0000238E  E049                    2066                  LSR.W       #8, D1
00002390  E849                    2067                  LSR.W       #4, D1
00002392  E14A                    2068                  LSL.W       #8, D2
00002394  E04A                    2069                  LSR.W       #8, D2
00002396  E84A                    2070                  LSR.W       #4, D2
00002398  E14B                    2071                  LSL.W       #8, D3
0000239A  E94B                    2072                  LSL.W       #4, D3
0000239C  E04B                    2073                  LSR.W       #8, D3
0000239E  E84B                    2074                  LSR.W       #4, D3
000023A0  4EB9 000023D6           2075                  JSR         CONVERT
000023A6  1001                    2076                  MOVE.B      D1, D0
000023A8  4EB9 000023D6           2077                  JSR         CONVERT
000023AE  1002                    2078                  MOVE.B      D2, D0
000023B0  4EB9 000023D6           2079                  JSR         CONVERT
000023B6  1003                    2080                  MOVE.B      D3, D0
000023B8  4EB9 000023D6           2081                  JSR         CONVERT        
000023BE  4CF8 00FF 0400          2082                  MOVEM.L     $400, D0-D7
000023C4  4E75                    2083                  RTS
000023C6                          2084  
000023C6                          2085  *---------------------------------------------------------------------------------------------------------
000023C6                          2086  *ADD 55 - ADD 55 HEX TO VALUE IN D0 TO CONVERT TO LETTER
000023C6                          2087  *---------------------------------------------------------------------------------------------------------                 
000023C6  0600 0037               2088  ADD55           ADDI.B      #55, D0
000023CA  4EF9 000023E0           2089                  JMP         RTN_ADD55
000023D0                          2090  
000023D0                          2091  *---------------------------------------------------------------------------------------------------------
000023D0                          2092  *ADD 48 - ADD 55 HEX TO VALUE IN D0 TO CONVERT TO NUMBER
000023D0                          2093  *---------------------------------------------------------------------------------------------------------                 
000023D0  0600 0030               2094  ADD48           ADDI.B      #48, D0
000023D4  4E75                    2095                  RTS
000023D6                          2096  *---------------------------------------------------------------------------------------------------------
000023D6                          2097  *CONVERT - CONVERTS VALUE AT D0 BY ADDING 55 OR 48 IF LETTER OR NUMBER
000023D6                          2098  *---------------------------------------------------------------------------------------------------------                
000023D6  0C00 000A               2099  CONVERT         CMPI.B      #$A, D0
000023DA  6CEA                    2100                  BGE         ADD55 
000023DC  4EB8 23D0               2101                  JSR         ADD48 
000023E0  14C0                    2102  RTN_ADD55       MOVE.B      D0, (A2)+  
000023E2  4E75                    2103                  RTS
000023E4                          2104                  
000023E4                          2105  *---------------------------------------------------------------------------------------------------------
000023E4                          2106  *BAD DATA - ILLEGAL ADDRESSING MODES USED, APPEND BAD DATA TO A2, REMOVE BEEF FLAG FROM MEMORY FOR LATER USE
000023E4                          2107  *---------------------------------------------------------------------------------------------------------            
000023E4  14FC 0042               2108  BADDATA         MOVE.B      #'B', (A2)+
000023E8  14FC 0041               2109                  MOVE.B      #'A', (A2)+
000023EC  14FC 0044               2110                  MOVE.B      #'D', (A2)+
000023F0  14FC 0020               2111                  MOVE.B      #' ', (A2)+
000023F4  14FC 0044               2112                  MOVE.B      #'D', (A2)+
000023F8  14FC 0041               2113                  MOVE.B      #'A', (A2)+
000023FC  14FC 0054               2114                  MOVE.B      #'T', (A2)+
00002400  14FC 0041               2115                  MOVE.B      #'A', (A2)+
00002404  31FC FFFF 0456          2116                  MOVE.W      #$FFFF, $456
0000240A  4E75                    2117                  RTS
0000240C                          2118  
0000240C                          2119  * Put variables and constants here
0000240C                          2120  *-----------Output texts------------------------------------
0000240C= 57 65 6C 63 6F 6D ...   2121  WelcomeMsg  DC.b    'Welcome to EASy68K Instruction Disassembler!',CR,LF,0
0000243B= 43 72 65 61 74 65 ...   2122  WrtBy       DC.B    'Created by: Vuochly Ky, Kunlakan Cherdchusilp, Nicolas Michael',CR,LF,CR,LF,0
0000247E= 50 72 65 63 6F 6E ...   2123  note1       DC.B    'Preconditions: ',CR,LF,0
00002490= 20 20 20 2D 2D 20 ...   2124  note2       DC.B    '   -- The address inputs must be in hexadecimal number (without $)',CR,LF,0
000024D5= 20 20 20 2D 2D 20 ...   2125  note3       DC.B    '   -- Addresses must be in the range of 0 ~ 00FFFFFE',CR,LF,0
0000250C= 20 20 20 2D 2D 20 ...   2126  note4       DC.B    '   -- Both starting and ending address must be even addresses',CR,LF,0
0000254C= 50 6C 65 61 73 65 ...   2127  startLoc    DC.B    'Please enter the starting location in hexadecimal format: ',0
00002587= 50 6C 65 61 73 65 ...   2128  endLoc      DC.B    'Please enter the ending location in hexadecimal format: ',0
000025C0= 57 6F 75 6C 64 20 ...   2129  AskToCont   DC.B    'Would you like to start over? (y/n) :',0
000025E6= 50 72 65 73 73 20 ...   2130  enter       DC.B    'Press ENTER key to see more.',0
00002603= 54 68 61 6E 6B 20 ...   2131  ThxMsg      DC.B    'Thank you for using our EASy68K Instruction Disassembler!',0
0000263E= 0080                    2132  string      DC.W    $80
00002640= 0090                    2133  startAddr   DC.W    $90
00002642= 0098                    2134  endAddr     DC.W    $98
00002644= 54 68 65 20 61 64 ...   2135  error       DC.B    'The address you entered is whether invalid or out of range.',CR,LF,CR,LF,0
00002684                          2136      END    START        ; last line of source

6 errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD48               23D0
ADD55               23C6
ADDABADDATA         1B5E
APPA                1E18
APPAF               1DBC
APPENDDISPLACE      2378
APPENDDORA          1DE8
APPENDDORAF         1D8C
APPENDEA            21D4
APPENDIMMEDIATE     21B6
APPENDLONG          2314
APPENDSLASH         1E10
APPENDSLASHF        1DB4
APPENDSRCAIREG      22B4
APPENDSRCAPDREG     22E8
APPENDSRCAPIREG     22CC
APPENDSRCAREG       22A4
APPENDSRCDREG       2294
APPENDWORD          2322
APPLISTRTM          1D56
ASKTOCONT           25C0
BACKWARDLIST        1DCC
BADDATA             23E4
BADINPUT            11C4
BADMULDATA          1A8C
BADQDATA            1AEA
BADSHIFTYDATA       2152
BCKWRDLOOP          1DD8
BCLRBADDATA         1BE2
BITDISPLACE         1C26
CHECKMODE           2176
CHECKODD            10CA
CHECKRANGEE         1108
CHECKRANGES         10A8
CHECKREG            2198
CLRALLDREG          2304
CODE0000            12B6
CODE0001            1302
CODE0010            1320
CODE0011            135A
CODE0100            137E
CODE0101            13C8
CODE0110            13EA
CODE0111            1404
CODE1000            140A
CODE1001            1450
CODE1010            146E
CODE1011            1476
CODE1100            1490
CODE1101            14B4
CODE1110            14DC
CODE1111            14DC
CONLCASE            1190
CONNUM              11AE
CONUCASE            1198
CONVERT             23D6
CONVERTED           119C
CR                  D
DISASSEMBLE         1236
ELEVEN000           17FE
ELEVEN001           1818
ELEVEN010           1832
ELEVEN011           184C
ELEVEN100           1854
ELEVEN101           186E
ELEVEN110           188A
ELEVEN111           18A6
END                 1204
ENDADDR             2642
ENDING              FFFFFE
ENDLOC              2587
ENTER               25E6
ERRMSGE             1138
ERRMSGS             1098
ERROR               2644
ERROR2              21AC
ERRORCHECK          216E
FINISH              12B4
FORWARDLIST         1D70
FOUR000             15D4
FOUR001             15DC
FOUR010             15E4
FOUR011             15F6
FOUR100             15FE
FOUR100_CONT        161C
FOUR101             164E
FOUR110             1658
FOUR111             165A
FRWRDLOOP           1D7C
GETDISPLACEMENT     1C20
GETEND              10DE
GETLISTMASK         1E28
GETMOVEREG          1C9C
GETSTART            106E
GET_OPMODE          193A
GET_SIZE            19AC
GOODINPUT           11C8
IFBCLR_DN           12DC
IFDIVS              1422
IFJSR               1682
IFLEA               13A6
IFMOVEA             1346
IFMOVEL             1336
IFMOVEML            1638
IFMOVEMW            1622
IFMOVEW             136E
IFOR                1438
IFRTS               166E
IMSOURCE            1BD6
INCPTRLONG          2168
INVALID_OPCODE      19F2
ISADDA              1AFE
ISADDAL             1AF4
ISBCLR              1B68
ISBRA               1BEC
ISEOR               1FAE
ISEORB              1F8C
ISEORL              1F9C
ISLEA               1E4A
ISLONG              226E
ISMOVE              1C36
ISMOVEL             1C2C
ISMOVEM             1CC0
ISMOVEML            1CC6
ISMULS              1A2C
ISNEG               1F4C
ISNEGB              1F2C
ISNEGL              1F22
ISOR                1FB8
ISORB               1F96
ISORI               1EBA
ISORIB              1EC8
ISORIL              1EB0
ISORL               1FA6
ISSHIFTYSTUFF       2096
ISSUBQ              1A96
LEABADDATA          1EA6
LEARTN              1E98
LF                  A
LOOPDYDOOP          1216
MAIN                1056
MAINTABLE           1254
MAKEZEROEIGHT       214C
MEMORYSHIFT         2106
MMAPPEA0            1D1C
MMAPPEA1            1D3E
MMBADDATA           1D12
MODE000             1984
MODE001             198A
MODE010             1990
MODE011             1996
MODE100             1998
MODE101             199E
MODE110             19A4
MODE111             19AA
MOVEBADDATA         1C92
MSAIREG             221A
MSAPDREG            222E
MSAPIREG            2224
MSAREG              2210
MSDREG              2206
MSIMMEDIATE         2254
MSLONG              2278
MSWORD              2286
MSWORL              2238
NEGBADDATA          1F82
NOTE1               247E
NOTE2               2490
NOTE3               24D5
NOTE4               250C
ORBADDATA           2024
ORIBADDATA          1F18
OUTDATA             10000
PARSEDNDEST         206C
PARSEDNSOURCE       203E
PARSEOROP           202E
PROMPTCONT          11CC
RECOVERPTR          215C
RETURN0000          12DA
RETURN0100          13A2
RETURN1000          141E
RETURN_ELEVEN       17FC
RETURN_FOUR         15D2
RETURN_OPMODE       1982
RETURN_SIX          1706
RETURN_SIZE         19DC
RETURN_THIRTEEN     18E0
RETURN_ZERO         1512
RTN_16BIT           1C0C
RTN_1DIR            1CFC
RTN_ADD55           23E0
RTN_APPA            1DFC
RTN_APPAF           1DA0
RTN_APPD            1DDE
RTN_APPDF           1D82
RTN_APPSRC          2204
RTN_BAD             1C86
RTN_BADA            1B52
RTN_BADMUL          1A80
RTN_BADORI          1F0A
RTN_BADQ            1ADE
RTN_BCLRBAD         1BCA
RTN_IMSRC           1B8E
RTN_LIST            1D6E
RTN_LONGPTR         2166
RTN_MEMSHIFT        20E6
RTN_NEGERR          1F74
RTN_OR              2016
RTN_PARSEOR         1FDA
RTN_REGCHK          2174
RTN_SETUP           20D2
RTN_SLASH           1E0A
RTN_SLASHF          1DAE
RTN_STRGCASE        2094
RTN_ZE              2142
SETEAREGISTERS      1E2C
SETUP               212E
SHIFTBADDATA        20F2
SHIFTMEM            2110
SHIFTSIZE           20FC
SIX0000             1708
SIX0001             171A
SIX0010             1722
SIX0011             172A
SIX0100             1732
SIX0101             1744
SIX0110             1756
SIX0111             175E
SIX1000             1766
SIX1001             1778
SIX1010             1780
SIX1011             178A
SIX1100             1794
SIX1101             17A8
SIX1110             17B8
SIX1111             17C2
SIZE00              19DE
SIZE01              19E4
SIZE10              19EA
SIZE11              19F0
START               1000
STARTADDR           2640
STARTING            400
STARTLOC            254C
STRING              263E
SWAP                21CE
TAB                 9
TABLEELEVEN         17CC
TABLEFOUR           15A2
TABLEFOURTEEN       14DC
TABLEOPMODE         1952
TABLESIX            16A6
TABLESIZE           19C4
TABLETHIRTEEN       18B0
TABLEZERO           14E2
THIRTEEN000         18E2
THIRTEEN001         18EC
THIRTEEN010         18F6
THIRTEEN011         1900
THIRTEEN100         190E
THIRTEEN101         1918
THIRTEEN110         1922
THIRTEEN111         192C
THXMSG              2603
VALIDATE            1148
VALLOOP             1158
WELCOME             100A
WELCOMEMSG          240C
WRTBY               243B
ZERO000             1514
ZERO001             1530
ZERO010             1538
ZERO011             1540
ZERO100             1548
ZERO101             156E
ZERO110             1576
ZERO111             1598
